namespace Elmah.Io.HResults.Facilities
{
    // Sources:
    // - https://github.com/tpn/winsdk-10/blob/master/Include/10.0.14393.0/um/CorError.h
    internal class FacilityUrtResolver : FacilityResolverBase
    {
        public FacilityUrtResolver() : base(19, "FACILITY_URT")
        {
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CRON001:To Cron expression", Justification = "<Pending>")]
        internal override Code Resolve(bool failure, int code)
        {
            return code switch
            {
                4096 => new Code(code, "CEE_E_ENTRYPOINT", "The entry point info is invalid."),
                4097 => new Code(code, "CEE_E_CVTRES_NOT_FOUND", "cannot find cvtres.exe"),
                4112 => new Code(code, "MSEE_E_LOADLIBFAILED", "Failed to delay load library %s (Win32 error: %d)."),
                4113 => new Code(code, "MSEE_E_GETPROCFAILED", "Failed to get entry point %s (Win32 error: %d)."),
                4114 => new Code(code, "MSEE_E_MULTCOPIESLOADED", "Multiple copies of MSCOREE.dll have been loaded by the same process."),
                4116 => new Code(code, "COR_E_APPDOMAINUNLOADED", "access unloaded appdomain"),
                4117 => new Code(code, "COR_E_CANNOTUNLOADAPPDOMAIN", "Error while unloading an appdomain"),
                4118 => new Code(code, "MSEE_E_ASSEMBLYLOADINPROGRESS", "Assembly is being currently being loaded"),
                4119 => new Code(code, "MSEE_E_CANNOTCREATEAPPDOMAIN", "Attempt to create appdomain failed"),
                4121 => new Code(code, "COR_E_FIXUPSINEXE", "Attempt to load an unverifiable exe with fixups (IAT with more than 2 sections or a TLS section)"),
                4122 => new Code(code, "COR_E_NO_LOADLIBRARY_ALLOWED", "Attempt to LoadLibrary a managed image in an improper way (only assemblies with EAT's area allowed.)"),
                4123 => new Code(code, "COR_E_NEWER_RUNTIME", "The assembly is built by a runtime newer than the currently loaded runtime, and cannot be loaded."),
                4124 => new Code(code, "COR_E_CANNOT_SET_POLICY", "Unable to set app domain security policy after non-GAC domain neutral assemblies are loaded"),
                4125 => new Code(code, "COR_E_CANNOT_SPECIFY_EVIDENCE", "Unable to use assembly evidence after non-GAC domain neutral assemblies are loaded"),
                4128 => new Code(code, "HOST_E_DEADLOCK", "Host detects deadlock on a blocking operation"),
                4129 => new Code(code, "HOST_E_INTERRUPTED", "Host interrupts a wait, similar to APC"),
                4130 => new Code(code, "HOST_E_INVALIDOPERATION", " The operation is invalid"),
                4131 => new Code(code, "HOST_E_CLRNOTAVAILABLE", "CLR has been disabled due to unrecoverable error"),
                4132 => new Code(code, "HOST_E_TIMEOUT", "A wait times out"),
                4133 => new Code(code, "HOST_E_NOT_OWNER"),
                4134 => new Code(code, "HOST_E_ABANDONED", "An event is abandoned"),
                4135 => new Code(code, "HOST_E_EXITPROCESS_THREADABORT", "ExitProcess due to ThreadAbort escalation"),
                4136 => new Code(code, "HOST_E_EXITPROCESS_ADUNLOAD", "ExitProcess due to AD Unload escalation"),
                4137 => new Code(code, "HOST_E_EXITPROCESS_TIMEOUT", "ExitProcess due to Timeout escalation"),
                4138 => new Code(code, "HOST_E_EXITPROCESS_OUTOFMEMORY", "ExitProcess due to OutOfMemory escalation"),
                4139 => new Code(code, "HOST_E_EXITPROCESS_STACKOVERFLOW", "ExitProcess due to StackOverflow escalation"),
                4153 => new Code(code, "COR_E_MODULE_HASH_CHECK_FAILED", "The check of the module's hash failed."),
                4160 => new Code(code, "FUSION_E_REF_DEF_MISMATCH", "The located assembly's manifest definition does not match the assembly reference."),
                4161 => new Code(code, "FUSION_E_INVALID_PRIVATE_ASM_LOCATION", "The private assembly was located outside the appbase directory."),
                4162 => new Code(code, "FUSION_E_ASM_MODULE_MISSING", "A module specified in the manifest was not found."),
                4163 => new Code(code, "FUSION_E_UNEXPECTED_MODULE_FOUND", "Modules which are not in the manifest were streamed in."),
                4164 => new Code(code, "FUSION_E_PRIVATE_ASM_DISALLOWED", "A strongly-named assembly is required."),
                4165 => new Code(code, "FUSION_E_SIGNATURE_CHECK_FAILED", "The check of the signature failed."),
                4166 => new Code(code, "FUSION_E_DATABASE_ERROR", "An unexpected error was encountered in the Assembly Cache database."),
                4168 => new Code(code, "FUSION_E_CODE_DOWNLOAD_DISABLED", "HTTP download of assemblies has been disabled for this appdomain."),
                4169 => new Code(code, "FUSION_E_UNINSTALL_DISALLOWED", "Uninstall of given assembly is not allowed."),
                4176 => new Code(code, "FUSION_E_HOST_GAC_ASM_MISMATCH", "Assembly in host store has a different signature than assembly in GAC"),
                4177 => new Code(code, "FUSION_E_LOADFROM_BLOCKED", "Hosted environment doesn't permit loading by location"),
                4178 => new Code(code, "FUSION_E_CACHEFILE_FAILED", "Failed to add file to AppDomain cache"),
                4352 => new Code(code, "CLDB_E_FILE_BADREAD", "Error occured during a read."),
                4353 => new Code(code, "CLDB_E_FILE_BADWRITE", "Error occured during a write."),
                4355 => new Code(code, "CLDB_E_FILE_READONLY", "File is read only."),
                4357 => new Code(code, "CLDB_E_NAME_ERROR", "An ill-formed name was given."),
                4358 => new Code(code, "CLDB_E_TRUNCATION", "ERROR: Data value was truncated."),
                4360 => new Code(code, "CLDB_E_RELOCATED", "A shared mem open failed to open at the originally"),
                4361 => new Code(code, "CLDB_S_NULL", "NULL data value."),
                4362 => new Code(code, "CLDB_E_SMDUPLICATE", "Create of shared memory failed. A memory mapping of the same name already exists."),
                4363 => new Code(code, "CLDB_E_NO_DATA", "There isn't .CLB data in the memory or stream."),
                4364 => new Code(code, "CLDB_E_READONLY", "Database is read only."),
                4365 => new Code(code, "CLDB_E_INCOMPATIBLE", "The importing scope is not comptabile with the emitting scope"),
                4366 => new Code(code, "CLDB_E_FILE_CORRUPT", "File is corrupt."),
                4367 => new Code(code, "CLDB_E_SCHEMA_VERNOTFOUND", "Version %d of schema '%s' not found."),
                4368 => new Code(code, "CLDB_E_BADUPDATEMODE", "cannot open a incrementally build scope for full update"),
                4385 => new Code(code, "CLDB_E_INDEX_NONULLKEYS", "Null value not allowed in unique index or primary key."),
                4386 => new Code(code, "CLDB_E_INDEX_DUPLICATE", "Unique index %s has been violated."),
                4387 => new Code(code, "CLDB_E_INDEX_BADTYPE", "The columns data type is not allowed in an index."),
                4388 => new Code(code, "CLDB_E_INDEX_NOTFOUND", "Index %s not found."),
                4389 => new Code(code, "CLDB_S_INDEX_TABLESCANREQUIRED", "Table scan required to run query."),
                4400 => new Code(code, "CLDB_E_RECORD_NOTFOUND", "Record wasn't found on lookup."),
                4401 => new Code(code, "CLDB_E_RECORD_OVERFLOW", "Too many records were returned for criteria."),
                4402 => new Code(code, "CLDB_E_RECORD_DUPLICATE", "Record is a duplicate."),
                4403 => new Code(code, "CLDB_E_RECORD_PKREQUIRED", "Primary key value is required."),
                4404 => new Code(code, "CLDB_E_RECORD_DELETED", "Record is valid but deleted."),
                4405 => new Code(code, "CLDB_E_RECORD_OUTOFORDER", "Record is emitted out of order."),
                4416 => new Code(code, "CLDB_E_COLUMN_OVERFLOW", "Data too large."),
                4417 => new Code(code, "CLDB_E_COLUMN_READONLY", "Column cannot be changed."),
                4418 => new Code(code, "CLDB_E_COLUMN_SPECIALCOL", "Too many RID or primary key columns, 1 is max."),
                4419 => new Code(code, "CLDB_E_COLUMN_PKNONULLS", "Primary key column %s may not allow the null value."),
                4432 => new Code(code, "CLDB_E_TABLE_CANTDROP", "Can't auto-drop table while open."),
                4433 => new Code(code, "CLDB_E_OBJECT_NOTFOUND", "Object was not found in the database."),
                4434 => new Code(code, "CLDB_E_OBJECT_COLNOTFOUND", "The column was not found."),
                4435 => new Code(code, "CLDB_E_VECTOR_BADINDEX", "The index given was invalid."),
                4436 => new Code(code, "CLDB_E_TOO_BIG", "A blob or string was too big."),
                4447 => new Code(code, "META_E_INVALID_TOKEN_TYPE", "A token of the wrong type passed to a metadata function."),
                4448 => new Code(code, "TLBX_E_INVALID_TYPEINFO", "Typelib import: invalid type, not converted."),
                4449 => new Code(code, "TLBX_E_INVALID_TYPEINFO_UNNAMED", "Typelib import: invalid type, not converted -- name unknown."),
                4450 => new Code(code, "TLBX_E_CTX_NESTED", "Typelib export: Format string for nested contexts."),
                4451 => new Code(code, "TLBX_E_ERROR_MESSAGE", "Typelib export: Error message wrapper."),
                4452 => new Code(code, "TLBX_E_CANT_SAVE", "Typelib export: cant \"SaveAllChanges()\""),
                4453 => new Code(code, "TLBX_W_LIBNOTREGISTERED", "Typelib export: type library is not registered."),
                4454 => new Code(code, "TLBX_E_CANTLOADLIBRARY", "Typelib export: type library cannot be loaded."),
                4455 => new Code(code, "TLBX_E_BAD_VT_TYPE", "Typelib import: invalid VT_*, not converted."),
                4456 => new Code(code, "TLBX_E_NO_MSCOREE_TLB", "Typelib export: can't load mscoree.tlb"),
                4457 => new Code(code, "TLBX_E_BAD_MSCOREE_TLB", "Typelib export: can't get a required typeinfo from mscoree.tlb."),
                4458 => new Code(code, "TLBX_E_TLB_EXCEPTION", "Typelib import: fault reading a typelib."),
                4459 => new Code(code, "TLBX_E_MULTIPLE_LCIDS", "Typelib import: Multiple LCID's parameters on a method."),
                4460 => new Code(code, "TLBX_I_TYPEINFO_IMPORTED", "Typelib import: progress report."),
                4461 => new Code(code, "TLBX_E_AMBIGUOUS_RETURN", "Typelib import: duplicate or ambiguous return types."),
                4462 => new Code(code, "TLBX_E_DUPLICATE_TYPE_NAME", "Typelib import: duplicate name (due to user-defined name)."),
                4463 => new Code(code, "TLBX_I_USEIUNKNOWN", "Typelib export: substituted IUnknown for type."),
                4464 => new Code(code, "TLBX_I_UNCONVERTABLE_ARGS", "Typelib import: signature can't be converted (eg, struct**)"),
                4465 => new Code(code, "TLBX_I_UNCONVERTABLE_FIELD", "Typelib import: signature can't be converted (eg, struct**)"),
                4466 => new Code(code, "TLBX_I_NONSEQUENTIALSTRUCT", "Typelib export: Can't convert non-sequential structs."),
                4467 => new Code(code, "TLBX_W_WARNING_MESSAGE", "Typelib export: Warning message wrapper."),
                4468 => new Code(code, "TLBX_I_RESOLVEREFFAILED", "Typelib import: The resolve ref call failed."),
                4469 => new Code(code, "TLBX_E_ASANY", "Typelib export: Encounterd \"AsAny\" -- ignored."),
                4470 => new Code(code, "TLBX_E_INVALIDLCIDPARAM", "Typelib export: Encounterd an LCID attribute set to an invalid param."),
                4471 => new Code(code, "TLBX_E_LCIDONDISPONLYITF", "Typelib export: Encounterd an LCID attribute on a disp only interface."),
                4472 => new Code(code, "TLBX_E_NONPUBLIC_FIELD", "Typelib export: Non-public field in public struct."),
                4473 => new Code(code, "TLBX_I_TYPE_EXPORTED", "Typelib export: type exported"),
                4474 => new Code(code, "TLBX_I_DUPLICATE_DISPID", "Typelib export: duplicate dispid -- auto corrected."),
                4475 => new Code(code, "TLBX_E_BAD_NAMES", "Typelib export: bad names list."),
                4476 => new Code(code, "TLBX_I_REF_TYPE_AS_STRUCT", "Typelib export: referenct tyep had layout, exported as struct."),
                4477 => new Code(code, "TLBX_E_GENERICINST_SIGNATURE", "TypeLib export: generic type instance in signature."),
                4478 => new Code(code, "TLBX_E_GENERICPAR_SIGNATURE", "TypeLib export: generic type parameter in signature."),
                4479 => new Code(code, "TLBX_I_GENERIC_TYPE", "TypeLib export: generic type definition"),
                4480 => new Code(code, "META_E_DUPLICATE", "Attempt to define an object that already exists."),
                4481 => new Code(code, "META_E_GUID_REQUIRED", "A guid was not provided where one was required."),
                4482 => new Code(code, "META_E_TYPEDEF_MISMATCH", "Merge: an import typedef matched ns.name, but not version and guid."),
                4483 => new Code(code, "META_E_MERGE_COLLISION", "Merge: conflict between import and emit"),
                4484 => new Code(code, "TLBX_W_NON_INTEGRAL_CA_TYPE", "TypeLib import: Ignoring IDL custom attribute -- does not have an integral value."),
                4485 => new Code(code, "TLBX_W_IENUM_CA_ON_IUNK", "TypeLib import: Ignoring IDL custom attribute -- using IEnum CA on an IUnknown derived interface."),
                4486 => new Code(code, "TLBX_E_NO_SAFEHANDLE_ARRAYS", "TypeLib export: detected array of SafeHandles"),
                4487 => new Code(code, "META_E_METHD_NOT_FOUND", "Merge: Class already in emit scope, but member not found"),
                4488 => new Code(code, "META_E_FIELD_NOT_FOUND", "Merge: Class already in emit scope, but member not found"),
                4489 => new Code(code, "META_S_PARAM_MISMATCH", "Merge: Parameter information mismatched."),
                4490 => new Code(code, "META_E_BADMETADATA", "Merge: Inconsistency in meta data import scope"),
                4491 => new Code(code, "META_E_INTFCEIMPL_NOT_FOUND", "Merge: Class already in emit scope, but interfaceimpl not found"),
                4492 => new Code(code, "TLBX_E_NO_CRITICALHANDLE_ARRAYS", "TypeLib export: detected array of CriticalHandles"),
                4493 => new Code(code, "META_E_CLASS_LAYOUT_INCONSISTENT", "Merge: Class is duplicated but class layout information is not consistent"),
                4494 => new Code(code, "META_E_FIELD_MARSHAL_NOT_FOUND", "Merge: Field is duplicated but we cannot find the matching FieldMarshal information"),
                4495 => new Code(code, "META_E_METHODSEM_NOT_FOUND", "Merge:"),
                4496 => new Code(code, "META_E_EVENT_NOT_FOUND", "Merge: Method is duplicated but we cannot find the matching event info."),
                4497 => new Code(code, "META_E_PROP_NOT_FOUND", "Merge: Method is duplicated but we cannot find the maching property info."),
                4498 => new Code(code, "META_E_BAD_SIGNATURE", "Bad binary signature"),
                4499 => new Code(code, "META_E_BAD_INPUT_PARAMETER", "Bad input parameters"),
                4500 => new Code(code, "META_E_METHDIMPL_INCONSISTENT", "Merge: duplicated methods have inconsistent ImplFlags"),
                4501 => new Code(code, "META_E_MD_INCONSISTENCY", "Merge: Inconsistency in meta data"),
                4502 => new Code(code, "META_E_CANNOTRESOLVETYPEREF", "Cannot resolve typeref"),
                4503 => new Code(code, "META_S_DUPLICATE", "Attempt to define an object that already exists in valid scenerios."),
                4504 => new Code(code, "META_E_STRINGSPACE_FULL", "No logical space left to create more user strings."),
                4505 => new Code(code, "META_E_UNEXPECTED_REMAP", "A TokenRemap occurred which we weren't prepared to handle."),
                4506 => new Code(code, "META_E_HAS_UNMARKALL", "Unmark all has been called already"),
                4507 => new Code(code, "META_E_MUST_CALL_UNMARKALL", "Must call UnmarkAll first before marking."),
                4508 => new Code(code, "META_E_GENERICPARAM_INCONSISTENT", "Merge: duplicated types/methods have inconsistent GenericParams"),
                4509 => new Code(code, "META_E_EVENT_COUNTS", "Merge: different event counts in import and emit scopes."),
                4510 => new Code(code, "META_E_PROPERTY_COUNTS", "Merge: different property counts in import and emit scopes."),
                4511 => new Code(code, "META_E_TYPEDEF_MISSING", "Merge: An input scope has a TypeRef which should but doesn't have a matching TypeDef."),
                4512 => new Code(code, "TLBX_E_CANT_LOAD_MODULE", "TypeLib export: can't open the module to export."),
                4513 => new Code(code, "TLBX_E_CANT_LOAD_CLASS", "TypeLib export: can't load a class."),
                4514 => new Code(code, "TLBX_E_NULL_MODULE", "TypeLib export: the hMod of a loaded class is 0; can't export it."),
                4515 => new Code(code, "TLBX_E_NO_CLSID_KEY", "TypeLib export: no CLSID or Interface subkey to HKCR."),
                4516 => new Code(code, "TLBX_E_CIRCULAR_EXPORT", "TypeLib export: attempt to export a CLB imported from a TLB."),
                6994 => new Code(code, "TLBX_E_CIRCULAR_EXPORT2", "TypeLib export: attempt to export a CLB imported from a TLB."),
                4517 => new Code(code, "TLBX_E_CIRCULAR_IMPORT", "TypeLib import: attempt to import a TLB exported from a CLB."),
                4518 => new Code(code, "TLBX_E_BAD_NATIVETYPE", "TypeLib export: bad Native type in method signature."),
                4519 => new Code(code, "TLBX_E_BAD_VTABLE", "TypeLib import: non-increasing vtable (duplicate slots)."),
                4520 => new Code(code, "TLBX_E_CRM_NON_STATIC", "TypeLib export: the COM register method is non static."),
                4521 => new Code(code, "TLBX_E_CRM_INVALID_SIG", "TypeLib export: the specified COM register method does not have the correct signature."),
                4522 => new Code(code, "TLBX_E_CLASS_LOAD_EXCEPTION", "TypeLib export: can't load, have the class load exception."),
                4523 => new Code(code, "TLBX_E_UNKNOWN_SIGNATURE", "TypeLib export: unknown element in signature."),
                4524 => new Code(code, "TLBX_E_REFERENCED_TYPELIB", "TypeLib import: reference to an external typelib."),
                4525 => new Code(code, "TLBX_E_INVALID_NAMESPACE", "TypeLib import: an imported typelib has an invalid namespace name."),
                4526 => new Code(code, "TLBX_E_LAYOUT_ERROR", "Typelib export: an error on Layout()"),
                4527 => new Code(code, "TLBX_E_NOTIUNKNOWN", "Typelib import: Interface not derived from IUnknown."),
                4528 => new Code(code, "TLBX_E_NONVISIBLEVALUECLASS", "Typelib export: Non COM visible value type in method signature."),
                4529 => new Code(code, "TLBX_E_LPTSTR_NOT_ALLOWED", "Typelib export: Types which contain the native type NATIVE_TYPE_LPTSTR are not allowed to be exported to COM."),
                4530 => new Code(code, "TLBX_E_AUTO_CS_NOT_ALLOWED", "Typelib export: Types with a char set of auto are not allowed to be exported to COM."),
                4531 => new Code(code, "TLBX_S_NOSTDINTERFACE", "Typelib export: Found an interface marked as IID_IDispatch or IID_IUnknown."),
                4532 => new Code(code, "TLBX_S_DUPLICATE_DISPID", "Typelib export: duplicate dispid found; ignored."),
                4533 => new Code(code, "TLBX_E_ENUM_VALUE_INVALID", "Typelib export: The enum value is not legal for a typelib."),
                4534 => new Code(code, "TLBX_E_DUPLICATE_IID", "Typelib export: Duplicate IID"),
                4535 => new Code(code, "TLBX_E_NO_NESTED_ARRAYS", "Tyeplib export: detected nested arrays."),
                4536 => new Code(code, "TLBX_E_PARAM_ERROR_NAMED", "Typelib import: param type couldn't be converted."),
                4537 => new Code(code, "TLBX_E_PARAM_ERROR_UNNAMED", "Typelib import: param type couldn't be converted -- param name unknown."),
                4538 => new Code(code, "TLBX_E_AGNOST_SIGNATURE", "TypeLib export: size agnostic element in signature."),
                4539 => new Code(code, "TLBX_E_CONVERT_FAIL", "TypeLib export: exporter failed."),
                4540 => new Code(code, "TLBX_W_DUAL_NOT_DISPATCH", "Typelib import: [dual] interface not derived from IDispatch."),
                4541 => new Code(code, "TLBX_E_BAD_SIGNATURE", "Typelib export: unconvertable signature (use specific error for reporting!)"),
                4542 => new Code(code, "TLBX_E_ARRAY_NEEDS_NT_FIXED", "Typelib export: non-fixed/non-safearray array in struct"),
                4543 => new Code(code, "TLBX_E_CLASS_NEEDS_NT_INTF", "Typelib export: non-interface class in struct"),
                4544 => new Code(code, "META_E_CA_INVALID_TARGET", "Known custom attribute on invalid target."),
                4545 => new Code(code, "META_E_CA_INVALID_VALUE", "Known custom attribute had invalid value."),
                4546 => new Code(code, "META_E_CA_INVALID_BLOB", "Known custom attribute blob is bad format."),
                4547 => new Code(code, "META_E_CA_REPEATED_ARG", "Known custom attribute blob has repeated named argument."),
                4548 => new Code(code, "META_E_CA_UNKNOWN_ARGUMENT", "Known custom attrubte named arg not recognized."),
                4549 => new Code(code, "META_E_CA_VARIANT_NYI", "Known attribute named argument doesn't support variant."),
                4550 => new Code(code, "META_E_CA_ARRAY_NYI", "Known attribute named argument doesn't support array."),
                4551 => new Code(code, "META_E_CA_UNEXPECTED_TYPE", "Known attribute parser found unexpected type."),
                4552 => new Code(code, "META_E_CA_INVALID_ARGTYPE", "Known attribute parser only handles fields -- no properties."),
                4553 => new Code(code, "META_E_CA_INVALID_ARG_FOR_TYPE", "Known attribute parser found an argument that is invalid for the object it is applied to."),
                4554 => new Code(code, "META_E_CA_INVALID_UUID", "The format of the UUID was invalid."),
                4555 => new Code(code, "META_E_CA_INVALID_MARSHALAS_FIELDS", "The MarshalAs attribute has fields set that are not valid for the specified unmanaged type."),
                4556 => new Code(code, "META_E_CA_NT_FIELDONLY", "The specified unmanaged type is only valid on fields."),
                4557 => new Code(code, "META_E_CA_NEGATIVE_PARAMINDEX", "The parameter index cannot be negative."),
                4558 => new Code(code, "META_E_CA_NEGATIVE_MULTIPLIER", "The multiplier cannot be negative."),
                4559 => new Code(code, "META_E_CA_NEGATIVE_CONSTSIZE", "The constant size cannot be negative."),
                4560 => new Code(code, "META_E_CA_FIXEDSTR_SIZE_REQUIRED", "A fixed string requires a size."),
                4561 => new Code(code, "META_E_CA_CUSTMARSH_TYPE_REQUIRED", "A custom marshaler requires the custom marshaler type."),
                4562 => new Code(code, "META_E_CA_FILENAME_REQUIRED", "A DllImport attribute requires a filename."),
                4563 => new Code(code, "TLBX_W_NO_PROPS_IN_EVENTS", "TypeLib import: Detected properties in a source dispinterface."),
                4564 => new Code(code, "META_E_NOT_IN_ENC_MODE", "SaveDelta was called without being in EnC mode"),
                4565 => new Code(code, "TLBX_W_ENUM_VALUE_TOOBIG", "Typelib export: The enum value is not legal for a typelib."),
                4566 => new Code(code, "META_E_METHOD_COUNTS", "Merge: different method counts in import and emit scopes."),
                4567 => new Code(code, "META_E_FIELD_COUNTS", "Merge: different field counts in import and emit scopes."),
                4568 => new Code(code, "META_E_PARAM_COUNTS", "Merge: different param counts in import and emit scopes."),
                4569 => new Code(code, "TLBX_W_EXPORTING_AUTO_LAYOUT", "TypeLib export: Exporting an auto-layout type."),
                4570 => new Code(code, "TLBX_E_TYPED_REF", "TypeLib export: Exporting a TypedReference."),
                4571 => new Code(code, "TLBX_W_DEFAULT_INTF_NOT_VISIBLE", "TypeLib export: ComDefaultInterface is not COMVisible."),
                4574 => new Code(code, "TLBX_W_BAD_SAFEARRAYFIELD_NO_ELEMENTVT", "TypeLib export: System.Array SAFEARRAY field without a SafeArraySubType."),
                4575 => new Code(code, "TLBX_W_LAYOUTCLASS_AS_INTERFACE", "TypeLib export: Class with layout parameter of field marked with UnmanagedType.Interface"),
                4576 => new Code(code, "TLBX_I_GENERIC_BASE_TYPE", "TypeLib export: type deriving from a generic type."),
                4577 => new Code(code, "TLBX_E_BITNESS_MISMATCH", "TypeLib export: bitness of assembly doesn't match bitness of output type library"),
                4578 => new Code(code, "TLBX_E_EVENT_WITH_NEWENUM", "TypeLib import: source interface with NewEnum member."),
                4579 => new Code(code, "TLBX_E_PROPGET_WITHOUT_RETURN", "TypeLib import: propget without return type"),
                4580 => new Code(code, "META_E_MISMATCHED_VISIBLITY", "Merge - Match found for type/method/etc but differs in visiblity"),
                4581 => new Code(code, "META_E_CA_BAD_FRIENDS_ARGS", "InternalsVisibileTo can't have a version, culture, or processor architecture"),
                4582 => new Code(code, "META_E_CA_FRIENDS_SN_REQUIRED", "Strong-name signed assemblies can only grant friend access to strong name-signed assemblies"),
                4608 => new Code(code, "VLDTR_S_WRN", "Warnings found in the validator."),
                4609 => new Code(code, "VLDTR_S_ERR", "Errors found in the validator."),
                4610 => new Code(code, "VLDTR_S_WRNERR", "Warnings and errors found in the validator."),
                4611 => new Code(code, "VLDTR_E_RID_OUTOFRANGE", "Rid is out of range."),
                4612 => new Code(code, "VLDTR_E_CDTKN_OUTOFRANGE", "Coded token type is out of range."),
                4613 => new Code(code, "VLDTR_E_CDRID_OUTOFRANGE", "Coded rid is out of range."),
                4614 => new Code(code, "VLDTR_E_STRING_INVALID", "String offset is invalid."),
                4615 => new Code(code, "VLDTR_E_GUID_INVALID", "GUID offset is invalid."),
                4616 => new Code(code, "VLDTR_E_BLOB_INVALID", "Blob offset if invalid."),
                4617 => new Code(code, "VLDTR_E_MOD_MULTI", "Multiple module records found."),
                4618 => new Code(code, "VLDTR_E_MOD_NULLMVID", "Module has null MVID."),
                4619 => new Code(code, "VLDTR_E_TR_NAMENULL", "TypeRef name is NULL."),
                4620 => new Code(code, "VLDTR_E_TR_DUP", "TypeRef has a dup."),
                4621 => new Code(code, "VLDTR_E_TD_NAMENULL", "TypeDef name is NULL."),
                4622 => new Code(code, "VLDTR_E_TD_DUPNAME", "TypeDef has a dup based on name+namespace."),
                4623 => new Code(code, "VLDTR_E_TD_DUPGUID", "TypeDef has a dup based on GUID."),
                4624 => new Code(code, "VLDTR_E_TD_NOTIFACEOBJEXTNULL", "TypeDef that's not an Interface and not System.Object extends nil parent."),
                4625 => new Code(code, "VLDTR_E_TD_OBJEXTENDSNONNULL", "System.Object extends a non-nil parent."),
                4626 => new Code(code, "VLDTR_E_TD_EXTENDSSEALED", "TypeDef extends sealed class."),
                4627 => new Code(code, "VLDTR_E_TD_DLTNORTSPCL", "TypeDef is Deleted but not marked with RTSpecialName."),
                4628 => new Code(code, "VLDTR_E_TD_RTSPCLNOTDLT", "TypeDef is marked RTSpecialName, but is not a Deleted record."),
                4629 => new Code(code, "VLDTR_E_MI_DECLPRIV", "MethodImpl's Decl is private"),
                4630 => new Code(code, "VLDTR_E_AS_BADNAME", "Assembly [Ref] name has path and/or extension."),
                4631 => new Code(code, "VLDTR_E_FILE_SYSNAME", "File has a system name (con, com, aux, etc.)."),
                4632 => new Code(code, "VLDTR_E_MI_BODYSTATIC", "MethodImpl's body is static."),
                4633 => new Code(code, "VLDTR_E_TD_IFACENOTABS", "TypeDef is marked Interface but not Abstract."),
                4634 => new Code(code, "VLDTR_E_TD_IFACEPARNOTNIL", "TypeDef is marked Interface but parent is not Nil."),
                4635 => new Code(code, "VLDTR_E_TD_IFACEGUIDNULL", "TypeDef is marked Interface but GUID is NULL."),
                4636 => new Code(code, "VLDTR_E_MI_DECLFINAL", "TMethodImpl's Decl is final."),
                4637 => new Code(code, "VLDTR_E_TD_VTNOTSEAL", "TypeDef is marked ValueType but not marked Sealed."),
                4638 => new Code(code, "VLDTR_E_PD_BADFLAGS", "Param has extra bits in flags."),
                4639 => new Code(code, "VLDTR_E_IFACE_DUP", "InterfaceImpl has a dup."),
                4640 => new Code(code, "VLDTR_E_MR_NAMENULL", "MemberRef name is NULL."),
                4641 => new Code(code, "VLDTR_E_MR_VTBLNAME", "MemberRef has an invalid name, _VtblGap*."),
                4642 => new Code(code, "VLDTR_E_MR_DELNAME", "MemberRef has an invalid name, _Deleted*."),
                4643 => new Code(code, "VLDTR_E_MR_PARNIL", "MemberRef parent Nil in a PE file."),
                4644 => new Code(code, "VLDTR_E_MR_BADCALLINGCONV", "MemberRef has invalid calling convention."),
                4645 => new Code(code, "VLDTR_E_MR_NOTVARARG", "MemberRef has Method parent but calling convention is not VARARG."),
                4646 => new Code(code, "VLDTR_E_MR_NAMEDIFF", "MemberRef name different from parent MethodDef."),
                4647 => new Code(code, "VLDTR_E_MR_SIGDIFF", "MemberRef signature different from parent MethodDef."),
                4648 => new Code(code, "VLDTR_E_MR_DUP", "MemberRef has a dup."),
                4649 => new Code(code, "VLDTR_E_CL_TDAUTO", "ClassLayout parent TypeDef is marked AutoLayout."),
                4650 => new Code(code, "VLDTR_E_CL_BADPCKSZ", "ClassLayout has bad PackingSize."),
                4651 => new Code(code, "VLDTR_E_CL_DUP", "ClassLayout has dup."),
                4652 => new Code(code, "VLDTR_E_FL_BADOFFSET", "FieldLayout2 has bad offset."),
                4653 => new Code(code, "VLDTR_E_FL_TDNIL", "FieldLayout2 has field with nil parent."),
                4654 => new Code(code, "VLDTR_E_FL_NOCL", "FieldLayout2 has no ClassLayout record."),
                4655 => new Code(code, "VLDTR_E_FL_TDNOTEXPLCT", "FieldLayout2 parent TypeDef is not marked with ExplicitLayout."),
                4656 => new Code(code, "VLDTR_E_FL_FLDSTATIC", "FieldLayout2 has field marked Static."),
                4657 => new Code(code, "VLDTR_E_FL_DUP", "FieldLayout2 has a dup."),
                4658 => new Code(code, "VLDTR_E_MODREF_NAMENULL", "ModuleRef name is NULL."),
                4659 => new Code(code, "VLDTR_E_MODREF_DUP", "ModuleRef has a dup."),
                4660 => new Code(code, "VLDTR_E_TR_BADSCOPE", "TypeRef has a bad resolution scope."),
                4661 => new Code(code, "VLDTR_E_TD_NESTEDNOENCL", "TypeDef marked nested has no encloser."),
                4662 => new Code(code, "VLDTR_E_TD_EXTTRRES", "TypeDef extends a TypeRef which resolves to a TypeDef in the same module."),
                4663 => new Code(code, "VLDTR_E_SIGNULL", "Signature specified is zero-sized."),
                4664 => new Code(code, "VLDTR_E_SIGNODATA", "Signature does not have enough data at specified byte."),
                4665 => new Code(code, "VLDTR_E_MD_BADCALLINGCONV", "Method signature has invalid calling convention."),
                4666 => new Code(code, "VLDTR_E_MD_THISSTATIC", "Method is marked static but has HASTHIS/EXPLICITTHIS set on the calling convention."),
                4667 => new Code(code, "VLDTR_E_MD_NOTTHISNOTSTATIC", "Method is not marked static but is not HASTHIS/EXPLICITTHIS."),
                4668 => new Code(code, "VLDTR_E_MD_NOARGCNT", "Method signature is missing the argument count."),
                4669 => new Code(code, "VLDTR_E_SIG_MISSELTYPE", "Signature missing element type."),
                4670 => new Code(code, "VLDTR_E_SIG_MISSTKN", "Signature missing token."),
                4671 => new Code(code, "VLDTR_E_SIG_TKNBAD", "Signature has bad token."),
                4672 => new Code(code, "VLDTR_E_SIG_MISSFPTR", "Signature is missing function pointer."),
                4673 => new Code(code, "VLDTR_E_SIG_MISSFPTRARGCNT", "Signature has function pointer missing argument count."),
                4674 => new Code(code, "VLDTR_E_SIG_MISSRANK", "Signature is missing rank specification."),
                4675 => new Code(code, "VLDTR_E_SIG_MISSNSIZE", "Signature is missing count of sized dimensions."),
                4676 => new Code(code, "VLDTR_E_SIG_MISSSIZE", "Signature is missing size of dimension."),
                4677 => new Code(code, "VLDTR_E_SIG_MISSNLBND", "Signature is missing count of lower bounds."),
                4678 => new Code(code, "VLDTR_E_SIG_MISSLBND", "Signature is missing a lower bound."),
                4679 => new Code(code, "VLDTR_E_SIG_BADELTYPE", "Signature has bad element type."),
                4680 => new Code(code, "VLDTR_E_SIG_MISSVASIZE", "Signature has value array missing size."),
                4681 => new Code(code, "VLDTR_E_FD_BADCALLINGCONV", "Field signature has invalid calling convention."),
                4682 => new Code(code, "VLDTR_E_MD_NAMENULL", "Method name is NULL."),
                4683 => new Code(code, "VLDTR_E_MD_PARNIL", "Method has parent NIL."),
                4684 => new Code(code, "VLDTR_E_MD_DUP", "Method has dup."),
                4685 => new Code(code, "VLDTR_E_FD_NAMENULL", "Field name is NULL."),
                4686 => new Code(code, "VLDTR_E_FD_PARNIL", "Field parent is Nil."),
                4687 => new Code(code, "VLDTR_E_FD_DUP", "Field has dup."),
                4688 => new Code(code, "VLDTR_E_AS_MULTI", "Multiple Assembly records found."),
                4689 => new Code(code, "VLDTR_E_AS_NAMENULL", "Assembly name is NULL."),
                4690 => new Code(code, "VLDTR_E_SIG_TOKTYPEMISMATCH", "E_T_VALUETYPE<class token> or E_T_CLASS<vtype token>."),
                4691 => new Code(code, "VLDTR_E_CL_TDINTF", "Class layout on an Interface."),
                4692 => new Code(code, "VLDTR_E_ASOS_OSPLTFRMIDINVAL", "AssemblyOS platform ID invalid."),
                4693 => new Code(code, "VLDTR_E_AR_NAMENULL", "AssemblyRef name is NULL."),
                4694 => new Code(code, "VLDTR_E_TD_ENCLNOTNESTED", "TypeDef not nested has encloser."),
                4695 => new Code(code, "VLDTR_E_AROS_OSPLTFRMIDINVAL", "AssemblyRefOS has invalid platform ID."),
                4696 => new Code(code, "VLDTR_E_FILE_NAMENULL", "File name is NULL."),
                4697 => new Code(code, "VLDTR_E_CT_NAMENULL", "ExportedType name is NULL."),
                4698 => new Code(code, "VLDTR_E_TD_EXTENDSCHILD", "TypeDef extends its own child."),
                4699 => new Code(code, "VLDTR_E_MAR_NAMENULL", "ManifestResource name is NULL."),
                4700 => new Code(code, "VLDTR_E_FILE_DUP", "File has dup."),
                4701 => new Code(code, "VLDTR_E_FILE_NAMEFULLQLFD", "File name is fully qualified."),
                4702 => new Code(code, "VLDTR_E_CT_DUP", "ExportedType has dup."),
                4703 => new Code(code, "VLDTR_E_MAR_DUP", "ManifestResource has dup."),
                4704 => new Code(code, "VLDTR_E_MAR_NOTPUBPRIV", "ManifestResource is neither Public not Private."),
                4705 => new Code(code, "VLDTR_E_TD_ENUMNOVALUE", "Enum has no \"value__\" field."),
                4706 => new Code(code, "VLDTR_E_TD_ENUMVALSTATIC", "Enum's \"value__\" field is static."),
                4707 => new Code(code, "VLDTR_E_TD_ENUMVALNOTSN", "Enum's \"value__\" field is not SpecialName."),
                4708 => new Code(code, "VLDTR_E_TD_ENUMFLDNOTST", "Enum's field is not static."),
                4709 => new Code(code, "VLDTR_E_TD_ENUMFLDNOTLIT", "Enum's field is not literal."),
                4710 => new Code(code, "VLDTR_E_TD_ENUMNOLITFLDS", "Enum has no literal fields."),
                4711 => new Code(code, "VLDTR_E_TD_ENUMFLDSIGMISMATCH", "Enum's field sig does not match value__ sig."),
                4712 => new Code(code, "VLDTR_E_TD_ENUMVALNOT1ST", "Enum's \"value__\" field is not first."),
                4713 => new Code(code, "VLDTR_E_FD_NOTVALUERTSN", "Field is RTSpecialName but name is not \"value__\"."),
                4714 => new Code(code, "VLDTR_E_FD_VALUEPARNOTENUM", "Field \"value__\" in not Enum class."),
                4715 => new Code(code, "VLDTR_E_FD_INSTINIFACE", "Instance field in interface."),
                4716 => new Code(code, "VLDTR_E_FD_NOTPUBINIFACE", "Non-public field in interface."),
                4717 => new Code(code, "VLDTR_E_FMD_GLOBALNOTPUBPRIVSC", "Global field/method neither Public nor PrivateScope."),
                4718 => new Code(code, "VLDTR_E_FMD_GLOBALNOTSTATIC", "Global field/method not static."),
                4719 => new Code(code, "VLDTR_E_FD_GLOBALNORVA", "Global field has no RVA."),
                4720 => new Code(code, "VLDTR_E_MD_CTORZERORVA", ".ctor,.cctor has zero RVA."),
                4721 => new Code(code, "VLDTR_E_FD_MARKEDNOMARSHAL", "Field is marked marshaled but has no marshaling rec."),
                4722 => new Code(code, "VLDTR_E_FD_MARSHALNOTMARKED", "Field has marshaling rec but is not marked marshaled."),
                4723 => new Code(code, "VLDTR_E_FD_MARKEDNODEFLT", "Field is marked HasDefault but has no const value."),
                4724 => new Code(code, "VLDTR_E_FD_DEFLTNOTMARKED", "Field has const value rec but is not marked HasDefault."),
                4725 => new Code(code, "VLDTR_E_FMD_MARKEDNOSECUR", "Field/method is marked HasSecurity but has no security rec."),
                4726 => new Code(code, "VLDTR_E_FMD_SECURNOTMARKED", "Field/method has security rec but is not marked HasSecurity."),
                4727 => new Code(code, "VLDTR_E_FMD_PINVOKENOTSTATIC", "Field/method is PInvoke but is not marked Static."),
                4728 => new Code(code, "VLDTR_E_FMD_MARKEDNOPINVOKE", "Field/method is marked PInvoke but has no ImplMap."),
                4729 => new Code(code, "VLDTR_E_FMD_PINVOKENOTMARKED", "Field/method has ImplMap but is not marked PInvoke."),
                4730 => new Code(code, "VLDTR_E_FMD_BADIMPLMAP", "Field/method has invalid ImplMap"),
                4731 => new Code(code, "VLDTR_E_IMAP_BADMODREF", "ImplMap has invalid ModuleRef"),
                4732 => new Code(code, "VLDTR_E_IMAP_BADMEMBER", "ImplMap has invalid MemberForwarded"),
                4733 => new Code(code, "VLDTR_E_IMAP_BADIMPORTNAME", "ImplMap has invalid ImportName"),
                4734 => new Code(code, "VLDTR_E_IMAP_BADCALLCONV", "ImplMap has invalid call conv"),
                4735 => new Code(code, "VLDTR_E_FMD_BADACCESSFLAG", "Field/method has invalid access flag"),
                4736 => new Code(code, "VLDTR_E_FD_INITONLYANDLITERAL", "Field is InitOnly and Literal"),
                4737 => new Code(code, "VLDTR_E_FD_LITERALNOTSTATIC", "Field is Literal but not Static"),
                4738 => new Code(code, "VLDTR_E_FMD_RTSNNOTSN", "Field/method is RTSpec.Name but not Spec.Name"),
                4739 => new Code(code, "VLDTR_E_MD_ABSTPARNOTABST", "Method is abstract, parent is not"),
                4740 => new Code(code, "VLDTR_E_MD_NOTSTATABSTININTF", "Method not static or abstract in interface"),
                4741 => new Code(code, "VLDTR_E_MD_NOTPUBININTF", "Method not public in interface"),
                4742 => new Code(code, "VLDTR_E_MD_CTORININTF", "ctor in interface"),
                4743 => new Code(code, "VLDTR_E_MD_GLOBALCTORCCTOR", "global ctor or cctor"),
                4744 => new Code(code, "VLDTR_E_MD_CTORSTATIC", "static ctor"),
                4745 => new Code(code, "VLDTR_E_MD_CTORNOTSNRTSN", "ctor,cctor not marked SpecialName,RTSpecialName"),
                4746 => new Code(code, "VLDTR_E_MD_CTORVIRT", "virtual ctor,cctor"),
                4747 => new Code(code, "VLDTR_E_MD_CTORABST", "abstract ctor,cctor"),
                4748 => new Code(code, "VLDTR_E_MD_CCTORNOTSTATIC", "instance cctor"),
                4749 => new Code(code, "VLDTR_E_MD_ZERORVA", "RVA=0, method not abstract or pinvoke or runtime, or reverse"),
                4750 => new Code(code, "VLDTR_E_MD_FINNOTVIRT", "Method is final and not virtual"),
                4751 => new Code(code, "VLDTR_E_MD_STATANDFINORVIRT", "Method is static and final or virtual"),
                4752 => new Code(code, "VLDTR_E_MD_ABSTANDFINAL", "Method is abstract and final"),
                4753 => new Code(code, "VLDTR_E_MD_ABSTANDIMPL", "Method is abstract and implemented"),
                4754 => new Code(code, "VLDTR_E_MD_ABSTANDPINVOKE", "Method is abstract and pinvoke"),
                4755 => new Code(code, "VLDTR_E_MD_ABSTNOTVIRT", "Method is abstract and not virtual"),
                4756 => new Code(code, "VLDTR_E_MD_NOTABSTNOTIMPL", "Method is not abstract and not implemented"),
                4757 => new Code(code, "VLDTR_E_MD_NOTABSTBADFLAGSRVA", "Method is not abstract and not (RVA!=0 or pinvoke or runtime)"),
                4758 => new Code(code, "VLDTR_E_MD_PRIVSCOPENORVA", "Method is PrivateScope and has RVA==0"),
                4759 => new Code(code, "VLDTR_E_MD_GLOBALABSTORVIRT", "Global method is abstract or virtual"),
                4760 => new Code(code, "VLDTR_E_SIG_LONGFORM", "Signature uses long form"),
                4761 => new Code(code, "VLDTR_E_MD_MULTIPLESEMANTICS", "Method has multiple semantics (warning)"),
                4762 => new Code(code, "VLDTR_E_MD_INVALIDSEMANTICS", "Method has invalid semantics (not event or prop)"),
                4763 => new Code(code, "VLDTR_E_MD_SEMANTICSNOTEXIST", "Method has semantics assoc that does not exist"),
                4764 => new Code(code, "VLDTR_E_MI_DECLNOTVIRT", "MethodImpl's Decl is not virtual"),
                4765 => new Code(code, "VLDTR_E_FMD_GLOBALITEM", "Global field/method (warning,CLS)"),
                4766 => new Code(code, "VLDTR_E_MD_MULTSEMANTICFLAGS", "Method has multiple semantic flags set"),
                4767 => new Code(code, "VLDTR_E_MD_NOSEMANTICFLAGS", "Method has no semantic flags set"),
                4768 => new Code(code, "VLDTR_E_FD_FLDINIFACE", "Field in Interface (warning, CLS)"),
                4769 => new Code(code, "VLDTR_E_AS_HASHALGID", "Unrecognized Hash Alg ID (warning)"),
                4770 => new Code(code, "VLDTR_E_AS_PROCID", "Unrecognized Processor ID in Assembly(warning)"),
                4771 => new Code(code, "VLDTR_E_AR_PROCID", "Unrecognized Processor ID in AssemblyRef(warning)"),
                4772 => new Code(code, "VLDTR_E_CN_PARENTRANGE", "Constant: parent token out of range"),
                4773 => new Code(code, "VLDTR_E_AS_BADFLAGS", "Invalid flags in Assembly"),
                4774 => new Code(code, "VLDTR_E_TR_HASTYPEDEF", "There is TypeDef with same name as TypeRef (warning)"),
                4775 => new Code(code, "VLDTR_E_IFACE_BADIMPL", "In InterfaceImpl, the implementing token is not TypeDef"),
                4776 => new Code(code, "VLDTR_E_IFACE_BADIFACE", "In InterfaceImpl, the implemented token is not TypeDef or TypeRef"),
                4777 => new Code(code, "VLDTR_E_TD_SECURNOTMARKED", "TypeDef has security rec but not marked HasSecurity"),
                4778 => new Code(code, "VLDTR_E_TD_MARKEDNOSECUR", "TypeDef marked HasSecurity but has no security rec"),
                4779 => new Code(code, "VLDTR_E_MD_CCTORHASARGS", ".cctor has arguments"),
                4780 => new Code(code, "VLDTR_E_CT_BADIMPL", "ExportedType has invalid Implementation"),
                4781 => new Code(code, "VLDTR_E_MI_ALIENBODY", "MethodImpl has body from other class"),
                4782 => new Code(code, "VLDTR_E_MD_CCTORCALLCONV", ".cctor has invalid calling convention"),
                4783 => new Code(code, "VLDTR_E_MI_BADCLASS", "MethodImpl has invalid Class token"),
                4784 => new Code(code, "VLDTR_E_MI_CLASSISINTF", "MethodImpl declared in Interface"),
                4785 => new Code(code, "VLDTR_E_MI_BADDECL", "MethodImpl has invalid MethodDeclaration token"),
                4786 => new Code(code, "VLDTR_E_MI_BADBODY", "MethodImpl has invalid MethodBody token"),
                4787 => new Code(code, "VLDTR_E_MI_DUP", "MethodImpl has duplicate"),
                4788 => new Code(code, "VLDTR_E_FD_BADPARENT", "Bad field parent"),
                4789 => new Code(code, "VLDTR_E_MD_PARAMOUTOFSEQ", "Param out of sequence (warning)"),
                4790 => new Code(code, "VLDTR_E_MD_PARASEQTOOBIG", "Param's sequence num exceeds num of args"),
                4791 => new Code(code, "VLDTR_E_MD_PARMMARKEDNOMARSHAL", "Param marked HasMarshal, has no marshaling info"),
                4792 => new Code(code, "VLDTR_E_MD_PARMMARSHALNOTMARKED", "Param has marshaling info, not marked HasMarshal"),
                4794 => new Code(code, "VLDTR_E_MD_PARMMARKEDNODEFLT", "Param marked HasDefault, has no const value"),
                4795 => new Code(code, "VLDTR_E_MD_PARMDEFLTNOTMARKED", "Param has const value, not marked HasDefault"),
                4796 => new Code(code, "VLDTR_E_PR_BADSCOPE", "Prop has invalid scope"),
                4797 => new Code(code, "VLDTR_E_PR_NONAME", "Prop has no name"),
                4798 => new Code(code, "VLDTR_E_PR_NOSIG", "Prop has no signature"),
                4799 => new Code(code, "VLDTR_E_PR_DUP", "Prop has a duplicate"),
                4800 => new Code(code, "VLDTR_E_PR_BADCALLINGCONV", "Prop has bad calling convention"),
                4801 => new Code(code, "VLDTR_E_PR_MARKEDNODEFLT", "Prop marked HasDefault, has no const value"),
                4802 => new Code(code, "VLDTR_E_PR_DEFLTNOTMARKED", "Prop has const value, not marked HasDefault"),
                4803 => new Code(code, "VLDTR_E_PR_BADSEMANTICS", "Prop has method not (Setter,Getter, or Other)"),
                4804 => new Code(code, "VLDTR_E_PR_BADMETHOD", "Prop has method with invalid token"),
                4805 => new Code(code, "VLDTR_E_PR_ALIENMETHOD", "Prop has method from another class"),
                4806 => new Code(code, "VLDTR_E_CN_BLOBNOTNULL", "Const has non-null blob when it should not"),
                4807 => new Code(code, "VLDTR_E_CN_BLOBNULL", "Const has null value blob"),
                4808 => new Code(code, "VLDTR_E_EV_BADSCOPE", "Event has invalid scope"),
                4810 => new Code(code, "VLDTR_E_EV_NONAME", "Event has no name"),
                4811 => new Code(code, "VLDTR_E_EV_DUP", "Event has a duplicate"),
                4812 => new Code(code, "VLDTR_E_EV_BADEVTYPE", "Event has invalid EventType"),
                4813 => new Code(code, "VLDTR_E_EV_EVTYPENOTCLASS", "Event's EventType is not a class"),
                4814 => new Code(code, "VLDTR_E_EV_BADSEMANTICS", "Event has method not (AddOn,RemoveOn,Fire,Other)"),
                4815 => new Code(code, "VLDTR_E_EV_BADMETHOD", "Event has method with invalid token"),
                4816 => new Code(code, "VLDTR_E_EV_ALIENMETHOD", "Event has method from another class"),
                4817 => new Code(code, "VLDTR_E_EV_NOADDON", "Event has no AddOn method"),
                4818 => new Code(code, "VLDTR_E_EV_NOREMOVEON", "Event has no RemoveOn method"),
                4819 => new Code(code, "VLDTR_E_CT_DUPTDNAME", "ExportedType has same name as TypeDef"),
                4820 => new Code(code, "VLDTR_E_MAR_BADOFFSET", "MRes refers to non-PE file with offset !=0"),
                4821 => new Code(code, "VLDTR_E_DS_BADOWNER", "Decl.security has invalid owner token"),
                4822 => new Code(code, "VLDTR_E_DS_BADFLAGS", "Decl.security has invalid action flags"),
                4823 => new Code(code, "VLDTR_E_DS_NOBLOB", "Decl.security has no permission blob"),
                4824 => new Code(code, "VLDTR_E_MAR_BADIMPL", "Manifest resource has invalid Implementation"),
                4826 => new Code(code, "VLDTR_E_MR_VARARGCALLINGCONV", "MemberRef has VARARG calling conv. (CLS warning)"),
                4827 => new Code(code, "VLDTR_E_MD_CTORNOTVOID", ".ctor,.cctor returning not void"),
                4828 => new Code(code, "VLDTR_E_EV_FIRENOTVOID", "Fire method returning not void"),
                4829 => new Code(code, "VLDTR_E_AS_BADLOCALE", "Invalid locale"),
                4830 => new Code(code, "VLDTR_E_CN_PARENTTYPE", "Constant has parent of invalid type"),
                4831 => new Code(code, "VLDTR_E_SIG_SENTINMETHODDEF", "E_T_SENTINEL in MethodDef signature"),
                4832 => new Code(code, "VLDTR_E_SIG_SENTMUSTVARARG", "E_T_SENTINEL <=> VARARG"),
                4833 => new Code(code, "VLDTR_E_SIG_MULTSENTINELS", "Multiple E_T_SENTINELs"),
                4834 => new Code(code, "VLDTR_E_SIG_LASTSENTINEL", "E_T_SENTINEL not followed by type"),
                4835 => new Code(code, "VLDTR_E_SIG_MISSARG", "Signature missing argument"),
                4836 => new Code(code, "VLDTR_E_SIG_BYREFINFIELD", "Field of ByRef type"),
                4837 => new Code(code, "VLDTR_E_MD_SYNCMETHODINVTYPE", "Synchronized method in value class"),
                4838 => new Code(code, "VLDTR_E_TD_NAMETOOLONG", "TypeDef name too long"),
                4839 => new Code(code, "VLDTR_E_AS_PROCDUP", "Duplicate Assembly Processor"),
                4840 => new Code(code, "VLDTR_E_ASOS_DUP", "Duplicate Assembly OS (ID+ver.major+ver.minor)"),
                4841 => new Code(code, "VLDTR_E_MAR_BADFLAGS", "Manifest Resource has bad flags"),
                4842 => new Code(code, "VLDTR_E_CT_NOTYPEDEFID", "ExportedType has nil TypeDefId"),
                4843 => new Code(code, "VLDTR_E_FILE_BADFLAGS", "File has bad flags"),
                4844 => new Code(code, "VLDTR_E_FILE_NULLHASH", "File has no hash blob"),
                4845 => new Code(code, "VLDTR_E_MOD_NONAME", "Module has no name"),
                4846 => new Code(code, "VLDTR_E_MOD_NAMEFULLQLFD", "Module has fully-qualified name"),
                4847 => new Code(code, "VLDTR_E_TD_RTSPCLNOTSPCL", "TypeDef is tdRTSpecialName but not tdSpecialName"),
                4848 => new Code(code, "VLDTR_E_TD_EXTENDSIFACE", "TypeDef extends interface"),
                4849 => new Code(code, "VLDTR_E_MD_CTORPINVOKE", ".ctor,.cctor is PInvokeImpl"),
                4850 => new Code(code, "VLDTR_E_TD_SYSENUMNOTCLASS", "System.Enum is not a class"),
                4851 => new Code(code, "VLDTR_E_TD_SYSENUMNOTEXTVTYPE", "System.Enum extends not System.ValueType"),
                4852 => new Code(code, "VLDTR_E_MI_SIGMISMATCH", "MethodImpl's Decl and Body signatures mismatch"),
                4853 => new Code(code, "VLDTR_E_TD_ENUMHASMETHODS", "TypeDef extends System.Enum but has methods"),
                4854 => new Code(code, "VLDTR_E_TD_ENUMIMPLIFACE", "TypeDef extends System.Enum but impls interface(s)"),
                4855 => new Code(code, "VLDTR_E_TD_ENUMHASPROP", "TypeDef extends System.Enum but has prop(s)"),
                4856 => new Code(code, "VLDTR_E_TD_ENUMHASEVENT", "TypeDef extends System.Enum but has event(s)"),
                4857 => new Code(code, "VLDTR_E_TD_BADMETHODLST", "TypeDef has MethodList > Nmethods+1"),
                4858 => new Code(code, "VLDTR_E_TD_BADFIELDLST", "TypeDef has FieldList > Nfields+1"),
                4859 => new Code(code, "VLDTR_E_CN_BADTYPE", "Constant has wrong type"),
                4860 => new Code(code, "VLDTR_E_TD_ENUMNOINSTFLD", "Enum has no instance fields"),
                4861 => new Code(code, "VLDTR_E_TD_ENUMMULINSTFLD", "Enum has multiple instance fields"),
                4862 => new Code(code, "VLDTR_E_INTERRUPTED", "Validator has been interrupted by the VEHandler."),
                4863 => new Code(code, "VLDTR_E_NOTINIT", "Validator failed to initialize correctly."),
                6912 => new Code(code, "VLDTR_E_IFACE_NOTIFACE", "Interface in InterfaceImpl is not marked tdInterface"),
                6913 => new Code(code, "VLDTR_E_FD_RVAHASNORVA", "Field marked fdHasFieldRVA but has no RVA rec"),
                6914 => new Code(code, "VLDTR_E_FD_RVAHASZERORVA", "Field marked fdHasFieldRVA has RVA =0"),
                6915 => new Code(code, "VLDTR_E_MD_RVAANDIMPLMAP", "Method has both RVA !=0 and ImplMap"),
                6916 => new Code(code, "VLDTR_E_TD_EXTRAFLAGS", "TypeDef has extraneous bits in flags"),
                6917 => new Code(code, "VLDTR_E_TD_EXTENDSITSELF", "TypeDef extends itself"),
                6918 => new Code(code, "VLDTR_E_TD_SYSVTNOTEXTOBJ", "System.ValueType does not extend System.Object"),
                6919 => new Code(code, "VLDTR_E_TD_EXTTYPESPEC", "Class extends TypeSpec (warning)"),
                6921 => new Code(code, "VLDTR_E_TD_VTNOSIZE", "Value Class has zero size"),
                6922 => new Code(code, "VLDTR_E_TD_IFACESEALED", "Interface is sealed"),
                6923 => new Code(code, "VLDTR_E_NC_BADNESTED", "Bad \"nested\" token in NestedClass"),
                6924 => new Code(code, "VLDTR_E_NC_BADENCLOSER", "Bad \"enclosing\" token in NestedClass"),
                6925 => new Code(code, "VLDTR_E_NC_DUP", "Duplicate NestedClass record"),
                6926 => new Code(code, "VLDTR_E_NC_DUPENCLOSER", "Duplicate NestedClass with different encloser"),
                6927 => new Code(code, "VLDTR_E_FRVA_ZERORVA", "RVA=0 in FieldRVA record"),
                6928 => new Code(code, "VLDTR_E_FRVA_BADFIELD", "Invalid field token in FieldRVA record"),
                6929 => new Code(code, "VLDTR_E_FRVA_DUPRVA", "Duplicate RVA in FieldRVA record"),
                6930 => new Code(code, "VLDTR_E_FRVA_DUPFIELD", "Duplicate field in FieldRVA record"),
                6931 => new Code(code, "VLDTR_E_EP_BADTOKEN", "Bad token as entry point in CLR header"),
                6932 => new Code(code, "VLDTR_E_EP_INSTANCE", "Entry point in CLR header is a token of instance method"),
                6933 => new Code(code, "VLDTR_E_TD_ENUMFLDBADTYPE", "Enum has non-integral underlying type"),
                6934 => new Code(code, "VLDTR_E_MD_BADRVA", "Method has bogus RVA"),
                6935 => new Code(code, "VLDTR_E_FD_LITERALNODEFAULT", "Literal field has no const value"),
                6936 => new Code(code, "VLDTR_E_IFACE_METHNOTIMPL", "Class implementing an interface doesn't impl.one of methods"),
                6937 => new Code(code, "VLDTR_E_CA_BADPARENT", "CA has invalid owner"),
                6938 => new Code(code, "VLDTR_E_CA_BADTYPE", "CA has invalid type"),
                6939 => new Code(code, "VLDTR_E_CA_NOTCTOR", "CA type is not .ctor"),
                6940 => new Code(code, "VLDTR_E_CA_BADSIG", "CA type has bad signature"),
                6941 => new Code(code, "VLDTR_E_CA_NOSIG", "CA type has no signature"),
                6942 => new Code(code, "VLDTR_E_CA_BADPROLOG", "CA blob has bad prolog (not 0x01 0x00)"),
                6943 => new Code(code, "VLDTR_E_MD_BADLOCALSIGTOK", "Method has invalid LocalSig token"),
                6944 => new Code(code, "VLDTR_E_MD_BADHEADER", "Method has invalid header"),
                6945 => new Code(code, "VLDTR_E_EP_TOOMANYARGS", "Entry point has more than one arg"),
                6946 => new Code(code, "VLDTR_E_EP_BADRET", "Entry point has bad return type"),
                6947 => new Code(code, "VLDTR_E_EP_BADARG", "Entry point has bad argument"),
                6948 => new Code(code, "VLDTR_E_SIG_BADVOID", "Illegal \"void\" in signature"),
                6949 => new Code(code, "VLDTR_E_IFACE_METHMULTIMPL", "Multiple implementation of method"),
                6950 => new Code(code, "VLDTR_E_GP_NAMENULL", "GenericParam name is NULL"),
                6951 => new Code(code, "VLDTR_E_GP_OWNERNIL", "GenericParam has nil owner."),
                6952 => new Code(code, "VLDTR_E_GP_DUPNAME", "GenericParam has duplicate by owner and name."),
                6953 => new Code(code, "VLDTR_E_GP_DUPNUMBER", "GenericParam has duplicate by owner and number."),
                6954 => new Code(code, "VLDTR_E_GP_NONSEQ_BY_OWNER", "GenericParam is non sequential by owner"),
                6955 => new Code(code, "VLDTR_E_GP_NONSEQ_BY_NUMBER", "GenericParam is non sequential by number"),
                6956 => new Code(code, "VLDTR_E_GP_UNEXPECTED_OWNER_FOR_VARIANT_VAR", "GenericParam has variance but its owner is not an interface or delegate"),
                6957 => new Code(code, "VLDTR_E_GP_ILLEGAL_VARIANT_MVAR", "GenericParam is a method type parameter and must be non-variant"),
                6958 => new Code(code, "VLDTR_E_GP_ILLEGAL_VARIANCE_FLAGS", "GenericParam has illegal value for variance flags"),
                6959 => new Code(code, "VLDTR_E_GP_REFANDVALUETYPE", "GenericParam has incompatible special constraints reference type and valuetype"),
                6960 => new Code(code, "VLDTR_E_GPC_OWNERNIL", "GenericParamConstraint has nil owner"),
                6961 => new Code(code, "VLDTR_E_GPC_DUP", "GenericParamConstraint has duplicate by owner and constraint"),
                6962 => new Code(code, "VLDTR_E_GPC_NONCONTIGUOUS", "GenericParamConstraint is non-contiguous with preceeding constraints for same owner"),
                6963 => new Code(code, "VLDTR_E_MS_METHODNIL", "MethodSpec has nil method"),
                6964 => new Code(code, "VLDTR_E_MS_DUP", "MethodSpec has duplicate based own method and instantiation"),
                6965 => new Code(code, "VLDTR_E_MS_BADCALLINGCONV", "MethodSpec signature has invalid calling convention"),
                6966 => new Code(code, "VLDTR_E_MS_MISSARITY", "MethodSpec signature is missing arity specification"),
                6967 => new Code(code, "VLDTR_E_MS_MISSARG", "MethodSpec signature is missing type argument"),
                6968 => new Code(code, "VLDTR_E_MS_ARITYMISMATCH", "MethodSpec arity of generic method and instantiation do not match"),
                6969 => new Code(code, "VLDTR_E_MS_METHODNOTGENERIC", "MethodSpec method is not generic"),
                6970 => new Code(code, "VLDTR_E_SIG_MISSARITY", "Signature missing arity of instantiated generic type"),
                6971 => new Code(code, "VLDTR_E_SIG_ARITYMISMATCH", "Signature has generic type of arity instantiated at different arity"),
                6972 => new Code(code, "VLDTR_E_MD_GENERIC_CCTOR", "Method cannot be both generic and a class constructor"),
                6973 => new Code(code, "VLDTR_E_MD_GENERIC_CTOR", "Method cannot be both generic and an instance constructor"),
                6974 => new Code(code, "VLDTR_E_MD_GENERIC_IMPORT", "Method cannot be both generic and defined on an imported type"),
                6975 => new Code(code, "VLDTR_E_MD_GENERIC_BADCALLCONV", "Method cannot be both generic and have non-default calling convention"),
                6976 => new Code(code, "VLDTR_E_EP_GENERIC_METHOD", "Entry point in CLR header is the token for a generic method"),
                6977 => new Code(code, "VLDTR_E_MD_MISSARITY", "Method signature is generic but is missing its arity"),
                6978 => new Code(code, "VLDTR_E_MD_ARITYZERO", "Method signature is generic but its arity is zero"),
                6979 => new Code(code, "VLDTR_E_SIG_ARITYZERO", "Signature has generic type instantiated at arity 0"),
                6980 => new Code(code, "VLDTR_E_MS_ARITYZERO", "MethodSpec signature has arity 0"),
                6981 => new Code(code, "VLDTR_E_MD_GPMISMATCH", "MethodDef signature has arity n but owns m GenericParams"),
                6982 => new Code(code, "VLDTR_E_EP_GENERIC_TYPE", "Entry point in CLR header is the token for a method in a generic type"),
                6983 => new Code(code, "VLDTR_E_MI_DECLNOTGENERIC", "MethodImpl overrides non-generic method with generic method"),
                6984 => new Code(code, "VLDTR_E_MI_IMPLNOTGENERIC", "MethodImpl overrides non-generic method with generic method"),
                6985 => new Code(code, "VLDTR_E_MI_ARITYMISMATCH", "MethodImpl overrides generic method of arity n with generic method of arity m"),
                6986 => new Code(code, "VLDTR_E_TD_EXTBADTYPESPEC", "TypeDef extends a TypeSpec that is not an instantiated type"),
                6987 => new Code(code, "VLDTR_E_SIG_BYREFINST", "Signature has type instantiated at byref at offset i"),
                6988 => new Code(code, "VLDTR_E_MS_BYREFINST", "Signature has type instantiated at byref at offset i"),
                6989 => new Code(code, "VLDTR_E_TS_EMPTY", "TypeSpec has empty signature"),
                6990 => new Code(code, "VLDTR_E_TS_HASSENTINALS", "TypeSpec has signature containing one or more sentinals"),
                6991 => new Code(code, "VLDTR_E_TD_GENERICHASEXPLAYOUT", "TypeDef is generic but has explicit layout"),
                6992 => new Code(code, "VLDTR_E_SIG_BADTOKTYPE", "Signature has token following ELEMENT_TYPE_CLASS (_VALUETYPE) that is not a TypeDef or TypeRef"),
                6993 => new Code(code, "VLDTR_E_IFACE_METHNOTIMPLTHISMOD", "Warn:Class doesn't implement interface method in this module"),
                4864 => new Code(code, "CORDBG_E_UNRECOVERABLE_ERROR", "Unrecoverable API error."),
                4865 => new Code(code, "CORDBG_E_PROCESS_TERMINATED", "Process was terminated."),
                4866 => new Code(code, "CORDBG_E_PROCESS_NOT_SYNCHRONIZED", "Process not synchronized."),
                4867 => new Code(code, "CORDBG_E_CLASS_NOT_LOADED", "A class is not loaded."),
                4868 => new Code(code, "CORDBG_E_IL_VAR_NOT_AVAILABLE", "An IL variable is not available at the"),
                4869 => new Code(code, "CORDBG_E_BAD_REFERENCE_VALUE", "A reference value was found to be bad"),
                4870 => new Code(code, "CORDBG_E_FIELD_NOT_AVAILABLE", "A field in a class is not available,"),
                4871 => new Code(code, "CORDBG_E_NON_NATIVE_FRAME", "\"Native frame only\" operation on"),
                4872 => new Code(code, "CORDBG_E_NONCONTINUABLE_EXCEPTION", "Continue on non-continuable exception"),
                4873 => new Code(code, "CORDBG_E_CODE_NOT_AVAILABLE", "The code is currently unavailable"),
                4874 => new Code(code, "CORDBG_E_FUNCTION_NOT_IL", "Attempt to get a ICorDebugFunction for"),
                4875 => new Code(code, "CORDBG_S_BAD_START_SEQUENCE_POINT", "Attempt to SetIP not at a sequence point"),
                4876 => new Code(code, "CORDBG_S_BAD_END_SEQUENCE_POINT", "Attempt to SetIP when not going to a"),
                4877 => new Code(code, "CORDBG_S_INSUFFICIENT_INFO_FOR_SET_IP", "SetIP is possible, but the debugger doesn't"),
                4878 => new Code(code, "CORDBG_E_CANT_SET_IP_INTO_FINALLY", "SetIP isn't possible, because SetIP would"),
                4879 => new Code(code, "CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY", "SetIP isn't possible because it would move"),
                4880 => new Code(code, "CORDBG_E_CANT_SET_IP_INTO_CATCH", "SetIP isn't possible, because SetIP would"),
                4881 => new Code(code, "CORDBG_E_SET_IP_NOT_ALLOWED_ON_NONLEAF_FRAME", "Setip cannot be done on any frame except"),
                4882 => new Code(code, "CORDBG_E_SET_IP_IMPOSSIBLE", "SetIP isn't allowed. For example, there is"),
                4883 => new Code(code, "CORDBG_E_FUNC_EVAL_BAD_START_POINT", "Func eval can't work if we're, for example,"),
                4884 => new Code(code, "CORDBG_E_INVALID_OBJECT", "This object value is no longer valid."),
                4885 => new Code(code, "CORDBG_E_FUNC_EVAL_NOT_COMPLETE", "If you call CordbEval::GetResult before the"),
                4886 => new Code(code, "CORDBG_S_FUNC_EVAL_HAS_NO_RESULT", "Some Func evals will lack a return value,"),
                4887 => new Code(code, "CORDBG_S_VALUE_POINTS_TO_VOID", "The Debugging API doesn't support"),
                4888 => new Code(code, "CORDBG_E_INPROC_NOT_IMPL", "The inproc version of the debugging API"),
                4889 => new Code(code, "CORDBG_S_FUNC_EVAL_ABORTED", "The func eval completed, but was aborted."),
                4890 => new Code(code, "CORDBG_E_STATIC_VAR_NOT_AVAILABLE", "A static variable isn't available because"),
                4891 => new Code(code, "CORDBG_E_OBJECT_IS_NOT_COPYABLE_VALUE_CLASS", "Can't copy a VC with object refs in it."),
                4892 => new Code(code, "CORDBG_E_CANT_SETIP_INTO_OR_OUT_OF_FILTER", "SetIP can't leave or enter a filter"),
                4893 => new Code(code, "CORDBG_E_CANT_CHANGE_JIT_SETTING_FOR_ZAP_MODULE", "You can't change JIT settings for ZAP"),
                4894 => new Code(code, "CORDBG_E_CANT_SET_IP_OUT_OF_FINALLY_ON_WIN64", "SetIP isn't possible because it would move"),
                4895 => new Code(code, "CORDBG_E_CANT_SET_IP_OUT_OF_CATCH_ON_WIN64", "SetIP isn't possible because it would move"),
                4896 => new Code(code, "CORDBG_E_REMOTE_CONNECTION_CONN_RESET", "The remote device closed the connection."),
                4897 => new Code(code, "CORDBG_E_REMOTE_CONNECTION_KEEP_ALIVE", "The connection was closed due to akeep alive failure."),
                4898 => new Code(code, "CORDBG_E_REMOTE_CONNECTION_FATAL_ERROR", "Generic error that the device connection has been broken with no chance for recovery."),
                4899 => new Code(code, "CORDBG_E_CANT_SET_TO_JMC", "Can't use JMC on this code (likely wrong jit settings)."),
                4909 => new Code(code, "CORDBG_E_BAD_THREAD_STATE", "The state of the thread is invalid."),
                4910 => new Code(code, "CORDBG_E_DEBUGGER_ALREADY_ATTACHED", "This process has already been attached to"),
                4911 => new Code(code, "CORDBG_E_SUPERFLOUS_CONTINUE", "Returned from a call to Continue that was"),
                4912 => new Code(code, "CORDBG_E_SET_VALUE_NOT_ALLOWED_ON_NONLEAF_FRAME", "Can't perfrom SetValue on non-leaf frames."),
                4913 => new Code(code, "CORDBG_E_ENC_EH_MAX_NESTING_LEVEL_CANT_INCREASE", "When doing EnC, some JITters don't let you"),
                4914 => new Code(code, "CORDBG_E_ENC_MODULE_NOT_ENC_ENABLED", "Tried to do EnC on a module that wasn't"),
                4915 => new Code(code, "CORDBG_E_SET_IP_NOT_ALLOWED_ON_EXCEPTION", "Setip cannot be done on any exception"),
                4916 => new Code(code, "CORDBG_E_VARIABLE_IS_ACTUALLY_LITERAL", "The 'variable' doesn't exist because it is a"),
                4917 => new Code(code, "CORDBG_E_PROCESS_DETACHED", "Process has been detached from"),
                4918 => new Code(code, "CORDBG_E_ENC_METHOD_SIG_CHANGED", "Not allowed to change the signature of an"),
                4919 => new Code(code, "CORDBG_E_ENC_METHOD_NO_LOCAL_SIG", "Can't get the local signature for the method"),
                4920 => new Code(code, "CORDBG_E_ENC_CANT_ADD_FIELD_TO_VALUE_OR_LAYOUT_CLASS", "Adding a field to a value or layout class is prohibitted,"),
                4921 => new Code(code, "CORDBG_E_ENC_CANT_CHANGE_FIELD", "Once you've got a field, you're not allowed to change"),
                4922 => new Code(code, "CORDBG_E_ENC_CANT_ADD_NON_PRIVATE_MEMBER", "Only support addition of private members."),
                4923 => new Code(code, "CORDBG_E_FIELD_NOT_STATIC", "Returned if someone tries to call GetStaticFieldValue"),
                4924 => new Code(code, "CORDBG_E_FIELD_NOT_INSTANCE", "Returned if someone tries to call GetStaticFieldValue"),
                4925 => new Code(code, "CORDBG_E_ENC_ZAPPED_WITHOUT_ENC", "If a zap file was created without the EnC flag set, then"),
                4926 => new Code(code, "CORDBG_E_ENC_BAD_METHOD_INFO", "Lacking information about method."),
                4927 => new Code(code, "CORDBG_E_ENC_JIT_CANT_UPDATE", "The JIT is unable to update the method."),
                4928 => new Code(code, "CORDBG_E_ENC_MISSING_CLASS", "An internal structure about the class is missing"),
                4929 => new Code(code, "CORDBG_E_ENC_INTERNAL_ERROR", "Generic message for \"Something user doesn't control went wrong\" message."),
                4930 => new Code(code, "CORDBG_E_ENC_HANGING_FIELD", "The field was added via enc after the class was loaded, and so instead of"),
                4931 => new Code(code, "CORDBG_E_MODULE_NOT_LOADED", "If the module isn't loaded, including if it's been unloaded."),
                4932 => new Code(code, "CORDBG_E_ENC_CANT_CHANGE_SUPERCLASS", "Not allowed to change which class something inherits from"),
                4933 => new Code(code, "CORDBG_E_UNABLE_TO_SET_BREAKPOINT", "Can't set a breakpoint here."),
                4934 => new Code(code, "CORDBG_E_DEBUGGING_NOT_POSSIBLE", "Debugging isn't possible due to an incompatability within the CLR implementation."),
                4935 => new Code(code, "CORDBG_E_KERNEL_DEBUGGER_ENABLED", "Debugging isn't possible because a kernel debugger is enabled on the system."),
                4936 => new Code(code, "CORDBG_E_KERNEL_DEBUGGER_PRESENT", "Debugging isn't possible because a kernel debugger is present on the system."),
                4937 => new Code(code, "CORDBG_E_HELPER_THREAD_DEAD", "The debugger's internal helper thread is dead."),
                4938 => new Code(code, "CORDBG_E_INTERFACE_INHERITANCE_CANT_CHANGE", "Not allowed to change interface inheritance."),
                4939 => new Code(code, "CORDBG_E_INCOMPATIBLE_PROTOCOL", "The debugger's protocol is incompatible with the debuggee."),
                4940 => new Code(code, "CORDBG_E_TOO_MANY_PROCESSES", "The debugger can only handle a finite number of debuggees."),
                4941 => new Code(code, "CORDBG_E_INTEROP_NOT_SUPPORTED", "Interop is not allowed on a win9x platform"),
                4942 => new Code(code, "CORDBG_E_NO_REMAP_BREAKPIONT", "Cannot call RemapFunction until have received RemapBreakpoint"),
                4943 => new Code(code, "CORDBG_E_OBJECT_NEUTERED", "Object has been neutered (it's in a zombie state)."),
                4944 => new Code(code, "CORPROF_E_FUNCTION_NOT_COMPILED", "Function not yet compiled."),
                4945 => new Code(code, "CORPROF_E_DATAINCOMPLETE", "The ID is not fully loaded/defined yet."),
                4946 => new Code(code, "CORPROF_E_NOT_REJITABLE_METHODS", "The Module is not configured for updateable methods."),
                4947 => new Code(code, "CORPROF_E_CANNOT_UPDATE_METHOD", "The Method could not be updated for re-jit."),
                4948 => new Code(code, "CORPROF_E_FUNCTION_NOT_IL", "The Method has no associated IL"),
                4949 => new Code(code, "CORPROF_E_NOT_MANAGED_THREAD", "The thread has never run managed code before"),
                4950 => new Code(code, "CORPROF_E_CALL_ONLY_FROM_INIT", "The function may only be called during profiler init"),
                4951 => new Code(code, "CORPROF_E_INPROC_NOT_ENABLED", "Inprocess debugging must be enabled during init"),
                4952 => new Code(code, "CORPROF_E_JITMAPS_NOT_ENABLED", "Can't get a JIT map becuase they are not enabled"),
                4953 => new Code(code, "CORPROF_E_INPROC_ALREADY_BEGUN", "If a profiler tries to call BeginInprocDebugging more than"),
                4954 => new Code(code, "CORPROF_E_INPROC_NOT_AVAILABLE", "States that inprocess debugging not allowed at this point"),
                4955 => new Code(code, "CORPROF_E_NOT_YET_AVAILABLE", "This is a general error used to indicated that the information"),
                4956 => new Code(code, "CORPROF_E_TYPE_IS_PARAMETERIZED", "The given type is a generic and cannot be used with this method."),
                4957 => new Code(code, "CORPROF_E_FUNCTION_IS_PARAMETERIZED", "The given function is a generic and cannot be used with this method."),
                4958 => new Code(code, "CORPROF_E_STACKSNAPSHOT_INVALID_TGT_THREAD", "A profiler tried to walk the stack of an invalid thread"),
                4959 => new Code(code, "CORPROF_E_STACKSNAPSHOT_UNMANAGED_CTX", "A profiler can not walk a thread that is currently executing unmanaged code"),
                4960 => new Code(code, "CORPROF_E_STACKSNAPSHOT_UNSAFE", "A stackwalk at this point may cause dead locks or data corruption"),
                4961 => new Code(code, "CORPROF_E_STACKSNAPSHOT_ABORTED", "Stackwalking callback requested the walk to abort"),
                4962 => new Code(code, "CORPROF_E_LITERALS_HAVE_NO_ADDRESS", "Returned when asked for the address of a static that is a literal."),
                4963 => new Code(code, "CORPROF_E_UNSUPPORTED_CALL_SEQUENCE", "A call was made at an unsupported time (e.g., API illegally called asynchronously)"),
                4964 => new Code(code, "CORPROF_E_ASYNCHRONOUS_UNSAFE", "A legal asynchronous call was made at an unsafe time (e.g., CLR locks are held)"),
                4965 => new Code(code, "CORPROF_E_CLASSID_IS_ARRAY", "The specified ClassID cannot be inspected by this function because it is an array"),
                4966 => new Code(code, "CORPROF_E_CLASSID_IS_COMPOSITE", "The specified ClassID is a non-array composite type (e.g., ref) and cannot be inspected"),
                5120 => new Code(code, "SECURITY_E_XML_TO_ASN_ENCODING", "Failed to convert XML to ASN"),
                5121 => new Code(code, "SECURITY_E_INCOMPATIBLE_SHARE", "Loading this assembly would produce a different grant set from other instances"),
                5122 => new Code(code, "SECURITY_E_UNVERIFIABLE", "Unverifable code failed policy check"),
                5123 => new Code(code, "SECURITY_E_INCOMPATIBLE_EVIDENCE", "Assembly already loaded without additional security evidence."),
                8191 => new Code(code, "CLDB_E_INTERNALERROR"),
                5136 => new Code(code, "CORSEC_E_DECODE_SET", "Failure decoding permission set"),
                5137 => new Code(code, "CORSEC_E_ENCODE_SET", "Failure encoding permission set"),
                5138 => new Code(code, "CORSEC_E_UNSUPPORTED_FORMAT", "Unrecognized encoding format"),
                5139 => new Code(code, "SN_CRYPTOAPI_CALL_FAILED", "StrongName APIs not supported on system"),
                5140 => new Code(code, "SN_NO_SUITABLE_CSP", "StrongName APIs couldn't locate a matching CSP"),
                5141 => new Code(code, "CORSEC_E_INVALID_ATTR", "Invalid security custom attribute"),
                5142 => new Code(code, "CORSEC_E_POLICY_EXCEPTION", "PolicyException thrown"),
                5143 => new Code(code, "CORSEC_E_MIN_GRANT_FAIL", "Failed to grant minimum permission requests"),
                5144 => new Code(code, "CORSEC_E_NO_EXEC_PERM", "Failed to grant permission to execute"),
                5145 => new Code(code, "CORSEC_E_XMLSYNTAX", "XML Syntax error"),
                5146 => new Code(code, "CORSEC_E_INVALID_STRONGNAME", "Strong name validation failed"),
                5147 => new Code(code, "CORSEC_E_MISSING_STRONGNAME", "Assembly is not strong named"),
                5148 => new Code(code, "CORSEC_E_CONTAINER_NOT_FOUND", "Strong name key container not found"),
                5149 => new Code(code, "CORSEC_E_INVALID_IMAGE_FORMAT", "Invalid assembly file format"),
                5150 => new Code(code, "CORSEC_E_INVALID_PUBLICKEY", "Invalid assembly public key"),
                5152 => new Code(code, "CORSEC_E_SIGNATURE_MISMATCH", "Signature size mismatch"),
                5168 => new Code(code, "CORSEC_E_CRYPTO", "generic CryptographicException"),
                5169 => new Code(code, "CORSEC_E_CRYPTO_UNEX_OPER", "generic CryptographicUnexpectedOperationException"),
                5178 => new Code(code, "CORSECATTR_E_BAD_ATTRIBUTE", "Generic problem with a custom attribute"),
                5179 => new Code(code, "CORSECATTR_E_MISSING_CONSTRUCTOR", "Missing a required constructor"),
                5180 => new Code(code, "CORSECATTR_E_FAILED_TO_CREATE_PERM", "Unable to create a permission for this attribute"),
                5181 => new Code(code, "CORSECATTR_E_BAD_ACTION_ASM", "SecurityAction type invalid on assembly"),
                5182 => new Code(code, "CORSECATTR_E_BAD_ACTION_OTHER", "SecurityAction type invalid on types and methods"),
                5183 => new Code(code, "CORSECATTR_E_BAD_PARENT", "Security custom attribute attached to invalid parent"),
                5184 => new Code(code, "CORSECATTR_E_TRUNCATED", "Bad custom attribute serialized blob"),
                5185 => new Code(code, "CORSECATTR_E_BAD_VERSION", "Bad custom attribute serialized blob version"),
                5186 => new Code(code, "CORSECATTR_E_BAD_ACTION", "Invalid security action code"),
                5187 => new Code(code, "CORSECATTR_E_NO_SELF_REF", "CA ref to CA def'd in same assembly"),
                5188 => new Code(code, "CORSECATTR_E_BAD_NONCAS", "Use of non-CAS perm with invalid action"),
                5189 => new Code(code, "CORSECATTR_E_ASSEMBLY_LOAD_FAILED", "Failed to load assembly containing CA (or req'd CA type)"),
                5190 => new Code(code, "CORSECATTR_E_ASSEMBLY_LOAD_FAILED_EX", "Failed to load assembly containing CA (or req'd CA type)"),
                5191 => new Code(code, "CORSECATTR_E_TYPE_LOAD_FAILED", "Failed to load CA type (or reqd CA type)"),
                5192 => new Code(code, "CORSECATTR_E_TYPE_LOAD_FAILED_EX", "Failed to load CA type (or reqd CA type)"),
                5193 => new Code(code, "CORSECATTR_E_ABSTRACT", "CA type is abstract"),
                5194 => new Code(code, "CORSECATTR_E_UNSUPPORTED_TYPE", "Unsupported type for field/property setter"),
                5195 => new Code(code, "CORSECATTR_E_UNSUPPORTED_ENUM_TYPE", "Unsupported base type for enum field/property"),
                5196 => new Code(code, "CORSECATTR_E_NO_FIELD", "Couldn't find a CA field"),
                5197 => new Code(code, "CORSECATTR_E_NO_PROPERTY", "Couldn't find a CA property"),
                5198 => new Code(code, "CORSECATTR_E_EXCEPTION", "Unexpected exception"),
                5199 => new Code(code, "CORSECATTR_E_EXCEPTION_HR", "Unexpected exception"),
                5216 => new Code(code, "ISS_E_OPEN_STORE_FILE"),
                5217 => new Code(code, "ISS_E_OPEN_FILE_MAPPING"),
                5218 => new Code(code, "ISS_E_MAP_VIEW_OF_FILE"),
                5219 => new Code(code, "ISS_E_GET_FILE_SIZE"),
                5220 => new Code(code, "ISS_E_CREATE_MUTEX"),
                5221 => new Code(code, "ISS_E_LOCK_FAILED"),
                5222 => new Code(code, "ISS_E_FILE_WRITE"),
                5223 => new Code(code, "ISS_E_SET_FILE_POINTER"),
                5224 => new Code(code, "ISS_E_CREATE_DIR"),
                5225 => new Code(code, "ISS_E_STORE_NOT_OPEN"),
                5248 => new Code(code, "ISS_E_CORRUPTED_STORE_FILE"),
                5249 => new Code(code, "ISS_E_STORE_VERSION"),
                5250 => new Code(code, "ISS_E_FILE_NOT_MAPPED"),
                5251 => new Code(code, "ISS_E_BLOCK_SIZE_TOO_SMALL"),
                5252 => new Code(code, "ISS_E_ALLOC_TOO_LARGE"),
                5253 => new Code(code, "ISS_E_USAGE_WILL_EXCEED_QUOTA"),
                5254 => new Code(code, "ISS_E_TABLE_ROW_NOT_FOUND"),
                5280 => new Code(code, "ISS_E_DEPRECATE"),
                5281 => new Code(code, "ISS_E_CALLER"),
                5282 => new Code(code, "ISS_E_PATH_LENGTH"),
                5283 => new Code(code, "ISS_E_MACHINE"),
                5284 => new Code(code, "ISS_E_MACHINE_DACL"),
                5200 => new Code(code, "ISS_E_ISOSTORE_START"),
                5375 => new Code(code, "ISS_E_ISOSTORE_END"),
                5632 => new Code(code, "COR_E_APPLICATION"),
                5378 => new Code(code, "COR_E_ARGUMENTOUTOFRANGE"),
                5379 => new Code(code, "COR_E_ARRAYTYPEMISMATCH"),
                5380 => new Code(code, "COR_E_CONTEXTMARSHAL"),
                5381 => new Code(code, "COR_E_TIMEOUT"),
                5495 => new Code(code, "COR_E_KEYNOTFOUND"),
                5440 => new Code(code, "COR_E_DEVICESNOTSUPPORTED"),
                5382 => new Code(code, "COR_E_EXECUTIONENGINE"),
                5383 => new Code(code, "COR_E_FIELDACCESS"),
                5431 => new Code(code, "COR_E_FORMAT"),
                5384 => new Code(code, "COR_E_INDEXOUTOFRANGE"),
                5437 => new Code(code, "COR_E_INSUFFICIENTMEMORY"),
                5438 => new Code(code, "COR_E_RUNTIMEWRAPPED"),
                5385 => new Code(code, "COR_E_INVALIDOPERATION"),
                5434 => new Code(code, "COR_E_INVALIDPROGRAM"),
                5402 => new Code(code, "COR_E_MEMBERACCESS"),
                5392 => new Code(code, "COR_E_METHODACCESS"),
                5393 => new Code(code, "COR_E_MISSINGFIELD"),
                5426 => new Code(code, "COR_E_MISSINGMANIFESTRESOURCE"),
                5394 => new Code(code, "COR_E_MISSINGMEMBER"),
                5395 => new Code(code, "COR_E_MISSINGMETHOD"),
                5430 => new Code(code, "COR_E_MISSINGSATELLITEASSEMBLY"),
                5396 => new Code(code, "COR_E_MULTICASTNOTSUPPORTED"),
                5416 => new Code(code, "COR_E_NOTFINITENUMBER"),
                5417 => new Code(code, "COR_E_DUPLICATEWAITOBJECT"),
                5433 => new Code(code, "COR_E_PLATFORMNOTSUPPORTED"),
                5397 => new Code(code, "COR_E_NOTSUPPORTED"),
                5398 => new Code(code, "COR_E_OVERFLOW"),
                5399 => new Code(code, "COR_E_RANK"),
                5387 => new Code(code, "COR_E_REMOTING"),
                5390 => new Code(code, "COR_E_SERVER"),
                5391 => new Code(code, "COR_E_SERVICEDCOMPONENT"),
                5386 => new Code(code, "COR_E_SECURITY"),
                5388 => new Code(code, "COR_E_SERIALIZATION"),
                5400 => new Code(code, "COR_E_SYNCHRONIZATIONLOCK"),
                5377 => new Code(code, "COR_E_SYSTEM"),
                5424 => new Code(code, "COR_E_THREADABORTED"),
                5435 => new Code(code, "COR_E_OPERATIONCANCELED"),
                5401 => new Code(code, "COR_E_THREADINTERRUPTED"),
                5408 => new Code(code, "COR_E_THREADSTATE"),
                5409 => new Code(code, "COR_E_THREADSTOP"),
                5413 => new Code(code, "COR_E_THREADSTART"),
                5428 => new Code(code, "COR_E_TYPEINITIALIZATION"),
                5410 => new Code(code, "COR_E_TYPELOAD"),
                5411 => new Code(code, "COR_E_ENTRYPOINTNOTFOUND"),
                5412 => new Code(code, "COR_E_DLLNOTFOUND"),
                5389 => new Code(code, "COR_E_VERIFICATION"),
                5415 => new Code(code, "COR_E_INVALIDCOMOBJECT"),
                5419 => new Code(code, "COR_E_SEMAPHOREFULL"),
                5420 => new Code(code, "COR_E_WAITHANDLECANNOTBEOPENED"),
                5421 => new Code(code, "COR_E_ABANDONEDMUTEX"),
                5429 => new Code(code, "COR_E_MARSHALDIRECTIVE"),
                5425 => new Code(code, "COR_E_INVALIDOLEVARIANTTYPE"),
                5427 => new Code(code, "COR_E_SAFEARRAYTYPEMISMATCH"),
                5432 => new Code(code, "COR_E_SAFEARRAYRANKMISMATCH"),
                5441 => new Code(code, "COR_E_DATAMISALIGNED"),
                5633 => new Code(code, "COR_E_INVALIDFILTERCRITERIA"),
                5634 => new Code(code, "COR_E_REFLECTIONTYPELOAD"),
                5635 => new Code(code, "COR_E_TARGET"),
                5636 => new Code(code, "COR_E_TARGETINVOCATION"),
                5637 => new Code(code, "COR_E_CUSTOMATTRIBUTEFORMAT"),
                5665 => new Code(code, "COR_E_FILELOAD"),
                5664 => new Code(code, "COR_E_IO"),
                5666 => new Code(code, "COR_E_OBJECTDISPOSED"),
                5667 => new Code(code, "COR_E_FAILFAST"),
                5696 => new Code(code, "COR_E_HOSTPROTECTION"),
                5697 => new Code(code, "COR_E_ILLEGAL_REENTRANCY"),
                5888 => new Code(code, "CLR_E_SHIM_RUNTIMELOAD", "Failed to load the runtime"),
                5889 => new Code(code, "CLR_E_SHIM_RUNTIMEEXPORT", "Failed to find a required export in the runtime"),
                5890 => new Code(code, "CLR_E_SHIM_INSTALLROOT", "Install root is not defined"),
                5891 => new Code(code, "CLR_E_SHIM_INSTALLCOMP", "Expected component of the runtime is not available"),
                6145 => new Code(code, "VER_E_HRESULT"),
                6146 => new Code(code, "VER_E_OFFSET"),
                6147 => new Code(code, "VER_E_OPCODE"),
                6148 => new Code(code, "VER_E_OPERAND"),
                6149 => new Code(code, "VER_E_TOKEN"),
                6150 => new Code(code, "VER_E_EXCEPT"),
                6151 => new Code(code, "VER_E_STACK_SLOT"),
                6152 => new Code(code, "VER_E_LOC"),
                6153 => new Code(code, "VER_E_ARG"),
                6154 => new Code(code, "VER_E_FOUND"),
                6155 => new Code(code, "VER_E_EXPECTED"),
                6156 => new Code(code, "VER_E_LOC_BYNAME"),
                6160 => new Code(code, "VER_E_UNKNOWN_OPCODE"),
                6161 => new Code(code, "VER_E_SIG_CALLCONV"),
                6162 => new Code(code, "VER_E_SIG_ELEMTYPE"),
                6164 => new Code(code, "VER_E_RET_SIG"),
                6165 => new Code(code, "VER_E_FIELD_SIG"),
                6168 => new Code(code, "VER_E_INTERNAL"),
                6169 => new Code(code, "VER_E_STACK_TOO_LARGE"),
                6170 => new Code(code, "VER_E_ARRAY_NAME_LONG"),
                6176 => new Code(code, "VER_E_FALLTHRU"),
                6177 => new Code(code, "VER_E_TRY_GTEQ_END"),
                6178 => new Code(code, "VER_E_TRYEND_GT_CS"),
                6179 => new Code(code, "VER_E_HND_GTEQ_END"),
                6180 => new Code(code, "VER_E_HNDEND_GT_CS"),
                6181 => new Code(code, "VER_E_FLT_GTEQ_CS"),
                6182 => new Code(code, "VER_E_TRY_START"),
                6183 => new Code(code, "VER_E_HND_START"),
                6184 => new Code(code, "VER_E_FLT_START"),
                6185 => new Code(code, "VER_E_TRY_OVERLAP"),
                6186 => new Code(code, "VER_E_TRY_EQ_HND_FIL"),
                6187 => new Code(code, "VER_E_TRY_SHARE_FIN_FAL"),
                6188 => new Code(code, "VER_E_HND_OVERLAP"),
                6189 => new Code(code, "VER_E_HND_EQ"),
                6190 => new Code(code, "VER_E_FIL_OVERLAP"),
                6191 => new Code(code, "VER_E_FIL_EQ"),
                6192 => new Code(code, "VER_E_FIL_CONT_TRY"),
                6193 => new Code(code, "VER_E_FIL_CONT_HND"),
                6194 => new Code(code, "VER_E_FIL_CONT_FIL"),
                6195 => new Code(code, "VER_E_FIL_GTEQ_CS"),
                6196 => new Code(code, "VER_E_FIL_START"),
                6197 => new Code(code, "VER_E_FALLTHRU_EXCEP"),
                6198 => new Code(code, "VER_E_FALLTHRU_INTO_HND"),
                6199 => new Code(code, "VER_E_FALLTHRU_INTO_FIL"),
                6200 => new Code(code, "VER_E_LEAVE"),
                6201 => new Code(code, "VER_E_RETHROW"),
                6202 => new Code(code, "VER_E_ENDFINALLY"),
                6203 => new Code(code, "VER_E_ENDFILTER"),
                6204 => new Code(code, "VER_E_ENDFILTER_MISSING"),
                6205 => new Code(code, "VER_E_BR_INTO_TRY"),
                6206 => new Code(code, "VER_E_BR_INTO_HND"),
                6207 => new Code(code, "VER_E_BR_INTO_FIL"),
                6208 => new Code(code, "VER_E_BR_OUTOF_TRY"),
                6209 => new Code(code, "VER_E_BR_OUTOF_HND"),
                6210 => new Code(code, "VER_E_BR_OUTOF_FIL"),
                6211 => new Code(code, "VER_E_BR_OUTOF_FIN"),
                6212 => new Code(code, "VER_E_RET_FROM_TRY"),
                6213 => new Code(code, "VER_E_RET_FROM_HND"),
                6214 => new Code(code, "VER_E_RET_FROM_FIL"),
                6215 => new Code(code, "VER_E_BAD_JMP_TARGET"),
                6216 => new Code(code, "VER_E_PATH_LOC"),
                6217 => new Code(code, "VER_E_PATH_THIS"),
                6218 => new Code(code, "VER_E_PATH_STACK"),
                6219 => new Code(code, "VER_E_PATH_STACK_DEPTH"),
                6220 => new Code(code, "VER_E_THIS"),
                6221 => new Code(code, "VER_E_THIS_UNINIT_EXCEP"),
                6222 => new Code(code, "VER_E_THIS_UNINIT_STORE"),
                6223 => new Code(code, "VER_E_THIS_UNINIT_RET"),
                6224 => new Code(code, "VER_E_THIS_UNINIT_V_RET"),
                6225 => new Code(code, "VER_E_THIS_UNINIT_BR"),
                6226 => new Code(code, "VER_E_LDFTN_CTOR"),
                6227 => new Code(code, "VER_E_STACK_NOT_EQ"),
                6228 => new Code(code, "VER_E_STACK_UNEXPECTED"),
                6229 => new Code(code, "VER_E_STACK_EXCEPTION"),
                6230 => new Code(code, "VER_E_STACK_OVERFLOW"),
                6231 => new Code(code, "VER_E_STACK_UNDERFLOW"),
                6232 => new Code(code, "VER_E_STACK_EMPTY"),
                6233 => new Code(code, "VER_E_STACK_UNINIT"),
                6234 => new Code(code, "VER_E_STACK_I_I4_I8"),
                6235 => new Code(code, "VER_E_STACK_R_R4_R8"),
                6236 => new Code(code, "VER_E_STACK_NO_R_I8"),
                6237 => new Code(code, "VER_E_STACK_NUMERIC"),
                6238 => new Code(code, "VER_E_STACK_OBJREF"),
                6239 => new Code(code, "VER_E_STACK_P_OBJREF"),
                6240 => new Code(code, "VER_E_STACK_BYREF"),
                6241 => new Code(code, "VER_E_STACK_METHOD"),
                6242 => new Code(code, "VER_E_STACK_ARRAY_SD"),
                6243 => new Code(code, "VER_E_STACK_VALCLASS"),
                6244 => new Code(code, "VER_E_STACK_P_VALCLASS"),
                6245 => new Code(code, "VER_E_STACK_NO_VALCLASS"),
                6246 => new Code(code, "VER_E_LOC_DEAD"),
                6247 => new Code(code, "VER_E_LOC_NUM"),
                6248 => new Code(code, "VER_E_ARG_NUM"),
                6249 => new Code(code, "VER_E_TOKEN_RESOLVE"),
                6250 => new Code(code, "VER_E_TOKEN_TYPE"),
                6251 => new Code(code, "VER_E_TOKEN_TYPE_MEMBER"),
                6252 => new Code(code, "VER_E_TOKEN_TYPE_FIELD"),
                6253 => new Code(code, "VER_E_TOKEN_TYPE_SIG"),
                6254 => new Code(code, "VER_E_UNVERIFIABLE"),
                6255 => new Code(code, "VER_E_LDSTR_OPERAND"),
                6256 => new Code(code, "VER_E_RET_PTR_TO_STACK"),
                6257 => new Code(code, "VER_E_RET_VOID"),
                6258 => new Code(code, "VER_E_RET_MISSING"),
                6259 => new Code(code, "VER_E_RET_EMPTY"),
                6260 => new Code(code, "VER_E_RET_UNINIT"),
                6261 => new Code(code, "VER_E_ARRAY_ACCESS"),
                6262 => new Code(code, "VER_E_ARRAY_V_STORE"),
                6263 => new Code(code, "VER_E_ARRAY_SD"),
                6264 => new Code(code, "VER_E_ARRAY_SD_PTR"),
                6265 => new Code(code, "VER_E_ARRAY_FIELD"),
                6266 => new Code(code, "VER_E_ARGLIST"),
                6267 => new Code(code, "VER_E_VALCLASS"),
                6268 => new Code(code, "VER_E_METHOD_ACCESS"),
                6269 => new Code(code, "VER_E_FIELD_ACCESS"),
                6270 => new Code(code, "VER_E_DEAD"),
                6271 => new Code(code, "VER_E_FIELD_STATIC"),
                6272 => new Code(code, "VER_E_FIELD_NO_STATIC"),
                6273 => new Code(code, "VER_E_ADDR"),
                6274 => new Code(code, "VER_E_ADDR_BYREF"),
                6275 => new Code(code, "VER_E_ADDR_LITERAL"),
                6276 => new Code(code, "VER_E_INITONLY"),
                6277 => new Code(code, "VER_E_THROW"),
                6278 => new Code(code, "VER_E_CALLVIRT_VALCLASS"),
                6279 => new Code(code, "VER_E_CALL_SIG"),
                6280 => new Code(code, "VER_E_CALL_STATIC"),
                6281 => new Code(code, "VER_E_CTOR"),
                6282 => new Code(code, "VER_E_CTOR_VIRT"),
                6283 => new Code(code, "VER_E_CTOR_OR_SUPER"),
                6284 => new Code(code, "VER_E_CTOR_MUL_INIT"),
                6285 => new Code(code, "VER_E_SIG"),
                6286 => new Code(code, "VER_E_SIG_ARRAY"),
                6287 => new Code(code, "VER_E_SIG_ARRAY_PTR"),
                6288 => new Code(code, "VER_E_SIG_ARRAY_BYREF"),
                6289 => new Code(code, "VER_E_SIG_ELEM_PTR"),
                6290 => new Code(code, "VER_E_SIG_VARARG"),
                6291 => new Code(code, "VER_E_SIG_VOID"),
                6292 => new Code(code, "VER_E_SIG_BYREF_BYREF"),
                6294 => new Code(code, "VER_E_CODE_SIZE_ZERO"),
                6295 => new Code(code, "VER_E_BAD_VARARG"),
                6296 => new Code(code, "VER_E_TAIL_CALL"),
                6297 => new Code(code, "VER_E_TAIL_BYREF"),
                6298 => new Code(code, "VER_E_TAIL_RET"),
                6299 => new Code(code, "VER_E_TAIL_RET_VOID"),
                6300 => new Code(code, "VER_E_TAIL_RET_TYPE"),
                6301 => new Code(code, "VER_E_TAIL_STACK_EMPTY"),
                6302 => new Code(code, "VER_E_METHOD_END"),
                6303 => new Code(code, "VER_E_BAD_BRANCH"),
                6304 => new Code(code, "VER_E_FIN_OVERLAP"),
                6305 => new Code(code, "VER_E_LEXICAL_NESTING"),
                6306 => new Code(code, "VER_E_VOLATILE"),
                6307 => new Code(code, "VER_E_UNALIGNED"),
                6308 => new Code(code, "VER_E_INNERMOST_FIRST"),
                6309 => new Code(code, "VER_E_CALLI_VIRTUAL"),
                6310 => new Code(code, "VER_E_CALL_ABSTRACT"),
                6311 => new Code(code, "VER_E_STACK_UNEXP_ARRAY"),
                6312 => new Code(code, "VER_E_NOT_IN_GC_HEAP"),
                6313 => new Code(code, "VER_E_TRY_N_EMPTY_STACK"),
                6314 => new Code(code, "VER_E_DLGT_CTOR"),
                6315 => new Code(code, "VER_E_DLGT_BB"),
                6316 => new Code(code, "VER_E_DLGT_PATTERN"),
                6317 => new Code(code, "VER_E_DLGT_LDFTN"),
                6318 => new Code(code, "VER_E_FTN_ABSTRACT"),
                6319 => new Code(code, "VER_E_SIG_C_VC"),
                6320 => new Code(code, "VER_E_SIG_VC_C"),
                6321 => new Code(code, "VER_E_BOX_PTR_TO_STACK"),
                6322 => new Code(code, "VER_E_SIG_BYREF_TB_AH"),
                6323 => new Code(code, "VER_E_SIG_ARRAY_TB_AH"),
                6324 => new Code(code, "VER_E_ENDFILTER_STACK"),
                6325 => new Code(code, "VER_E_DLGT_SIG_I"),
                6326 => new Code(code, "VER_E_DLGT_SIG_O"),
                6327 => new Code(code, "VER_E_RA_PTR_TO_STACK"),
                6328 => new Code(code, "VER_E_CATCH_VALUE_TYPE"),
                6329 => new Code(code, "VER_E_CATCH_BYREF"),
                6330 => new Code(code, "VER_E_FIL_PRECEED_HND"),
                6331 => new Code(code, "VER_E_LDVIRTFTN_STATIC"),
                6332 => new Code(code, "VER_E_CALLVIRT_STATIC"),
                6333 => new Code(code, "VER_E_INITLOCALS"),
                6334 => new Code(code, "VER_E_BR_TO_EXCEPTION"),
                6335 => new Code(code, "VER_E_CALL_CTOR"),
                6336 => new Code(code, "VER_E_VALCLASS_OBJREF_VAR"),
                6337 => new Code(code, "VER_E_STACK_P_VALCLASS_OBJREF_VAR"),
                6338 => new Code(code, "VER_E_SIG_VAR_PARAM"),
                6339 => new Code(code, "VER_E_SIG_MVAR_PARAM"),
                6340 => new Code(code, "VER_E_SIG_VAR_ARG"),
                6341 => new Code(code, "VER_E_SIG_MVAR_ARG"),
                6342 => new Code(code, "VER_E_SIG_GENERICINST"),
                6343 => new Code(code, "VER_E_SIG_METHOD_INST"),
                6344 => new Code(code, "VER_E_SIG_METHOD_PARENT_INST"),
                6345 => new Code(code, "VER_E_SIG_FIELD_PARENT_INST"),
                6346 => new Code(code, "VER_E_CALLCONV_NOT_GENERICINST"),
                6347 => new Code(code, "VER_E_TOKEN_BAD_METHOD_SPEC"),
                6348 => new Code(code, "VER_E_BAD_READONLY_PREFIX"),
                6349 => new Code(code, "VER_E_BAD_CONSTRAINED_PREFIX"),
                6350 => new Code(code, "VER_E_CIRCULAR_VAR_CONSTRAINTS"),
                6351 => new Code(code, "VER_E_CIRCULAR_MVAR_CONSTRAINTS"),
                6352 => new Code(code, "VER_E_UNSATISFIED_METHOD_INST"),
                6353 => new Code(code, "VER_E_UNSATISFIED_METHOD_PARENT_INST"),
                6354 => new Code(code, "VER_E_UNSATISFIED_FIELD_PARENT_INST"),
                6355 => new Code(code, "VER_E_UNSATISFIED_BOX_OPERAND"),
                6356 => new Code(code, "VER_E_CONSTRAINED_CALL_WITH_NON_BYREF_THIS"),
                6357 => new Code(code, "VER_E_CONSTRAINED_OF_NON_VARIABLE_TYPE"),
                6358 => new Code(code, "VER_E_READONLY_UNEXPECTED_CALLEE"),
                6359 => new Code(code, "VER_E_READONLY_ILLEGAL_WRITE"),
                6360 => new Code(code, "VER_E_READONLY_IN_MKREFANY"),
                6361 => new Code(code, "VER_E_UNALIGNED_ALIGNMENT"),
                6362 => new Code(code, "VER_E_TAILCALL_INSIDE_EH"),
                6363 => new Code(code, "VER_E_BACKWARD_BRANCH"),
                6364 => new Code(code, "VER_E_CALL_TO_VTYPE_BASE"),
                6365 => new Code(code, "VER_E_NEWOBJ_OF_ABSTRACT_CLASS"),
                6366 => new Code(code, "VER_E_UNMANAGED_POINTER"),
                6367 => new Code(code, "VER_E_LDFTN_NON_FINAL_VIRTUAL"),
                6368 => new Code(code, "VER_E_FIELD_OVERLAP"),
                6369 => new Code(code, "VER_E_THIS_MISMATCH"),
                6370 => new Code(code, "VER_E_STACK_I_I4"),
                6384 => new Code(code, "VER_E_BAD_PE"),
                6385 => new Code(code, "VER_E_BAD_MD"),
                6386 => new Code(code, "VER_E_BAD_APPDOMAIN"),
                6387 => new Code(code, "VER_E_TYPELOAD"),
                6388 => new Code(code, "VER_E_PE_LOAD"),
                6389 => new Code(code, "VER_E_WRITE_RVA_STATIC"),
                6401 => new Code(code, code.ToString(), "Represents the exception thrown when a component cannot be granted a license."),
                6464 => new Code(code, "COR_E_Xml"),
                6465 => new Code(code, "COR_E_XmlSchema"),
                6466 => new Code(code, "COR_E_XmlXslt"),
                6467 => new Code(code, "COR_E_XmlXPath"),
                6468 => new Code(code, "COR_E_XmlQuery"),
                6432 => new Code(code, "COR_E_Data"),
                6433 => new Code(code, "COR_E_DataDeletedRowInaccessible"),
                6434 => new Code(code, "COR_E_DataDuplicateName"),
                6435 => new Code(code, "COR_E_DataInRowChangingEvent"),
                6436 => new Code(code, "COR_E_DataInvalidConstraint"),
                6437 => new Code(code, "COR_E_DataMissingPrimaryKey"),
                6438 => new Code(code, "COR_E_DataNoNullAllowed"),
                6439 => new Code(code, "COR_E_DataReadOnly"),
                6440 => new Code(code, "COR_E_DataRowNotInTable"),
                6441 => new Code(code, "COR_E_DataVersionNotFound"),
                6442 => new Code(code, "COR_E_DataConstraint"),
                6443 => new Code(code, "COR_E_StrongTyping"),
                6448 => new Code(code, "COR_E_SqlType"),
                6449 => new Code(code, "COR_E_SqlNullValue"),
                6450 => new Code(code, "COR_E_SqlTruncate"),
                6451 => new Code(code, "COR_E_AdapterMapping"),
                6452 => new Code(code, "COR_E_DataAdapter"),
                6453 => new Code(code, "COR_E_DBConcurrency"),
                6454 => new Code(code, "COR_E_OperationAborted"),
                6404 => new Code(code, "COR_E_SqlException", "System.Data.SqlClient.SqlClientException"),
                6455 => new Code(code, "COR_E_OdbcException", "System.Data.Odbc.OdbcException"),
                6456 => new Code(code, "COR_E_OracleException", "System.Data.OracleClient.OracleException"),
                7168 => new Code(code, "CORDBG_E_THREAD_NOT_SCHEDULED", "Thread is not scheduled. Thus we may not have OSThreadId, handle, or context"),
                7169 => new Code(code, "CORDBG_E_HANDLE_HAS_BEEN_DISPOSED", "Handle has been disposed."),
                7170 => new Code(code, "CORDBG_E_NONINTERCEPTABLE_EXCEPTION", "Cant intercept this exception."),
                7171 => new Code(code, "CORDBG_E_CANT_UNWIND_ABOVE_CALLBACK", "When intercepting an exception, cannot intercept above the current frame."),
                7172 => new Code(code, "CORDBG_E_INTERCEPT_FRAME_ALREADY_SET", "The intercept frame for this exception has already been set."),
                7173 => new Code(code, "CORDBG_E_NO_NATIVE_PATCH_AT_ADDR", "there's no native patch at the given address."),
                7174 => new Code(code, "CORDBG_E_MUST_BE_INTEROP_DEBUGGING", "This API is only allowed when interop debugging."),
                7175 => new Code(code, "CORDBG_E_NATIVE_PATCH_ALREADY_AT_ADDR", "There's already a native patch at the address"),
                7176 => new Code(code, "CORDBG_E_TIMEOUT", "a wait timed out .. likely an indication of deadlock."),
                7177 => new Code(code, "CORDBG_E_CANT_CALL_ON_THIS_THREAD", "Can't use the API on this thread."),
                7178 => new Code(code, "CORDBG_E_ENC_INFOLESS_METHOD", "Method was not JITed in EnC mode"),
                7179 => new Code(code, "CORDBG_E_ENC_NESTED_HANLDERS", "Frame cant be updated due to change in max nesting of handlers"),
                7180 => new Code(code, "CORDBG_E_ENC_IN_FUNCLET", "Method is in a callable handler/filter. Cant grow stack"),
                7181 => new Code(code, "CORDBG_E_ENC_LOCALLOC", "Frame cant be updated due to localloc"),
                7182 => new Code(code, "CORDBG_E_ENC_EDIT_NOT_SUPPORTED", "Attempt to perform unsupported edit"),
                7183 => new Code(code, "CORDBG_E_FEABORT_DELAYED_UNTIL_THREAD_RESUMED", "Attempt to func eval abort on a suspended thread."),
                7184 => new Code(code, "CORDBG_E_NOTREADY", "The LS is not in a good spot to perform the requested operation."),
                7185 => new Code(code, "CORDBG_E_CANNOT_RESOLVE_ASSEMBLY", "We failed to resolve assembly given an AssemblyRef token. Assembly may be not loaded yet or not a valid token."),
                7186 => new Code(code, "CORDBG_E_MUST_BE_IN_LOAD_MODULE", "Must be in context of LoadModule callback to perform requested operation"),
                7187 => new Code(code, "CORDBG_S_NOT_ALL_BITS_SET", "Not all bits specified were successfully applied"),
                7188 => new Code(code, "CORDBG_E_NGEN_NOT_SUPPORTED", "NGEN must be supported to perform the requested operation"),
                7189 => new Code(code, "CORDBG_E_ILLEGAL_SHUTDOWN_ORDER", "Trying to shutdown out of order."),
                7190 => new Code(code, "CORDBG_E_CANNOT_DEBUG_FIBER_PROCESS", "For Whidbey, we don't support debugging fiber mode managed process"),
                7191 => new Code(code, "CORDBG_E_MUST_BE_IN_CREATE_PROCESS", "Must be in context of CreateProcess callback to perform requested operation"),
                7192 => new Code(code, "CORDBG_E_DETACH_FAILED_OUTSTANDING_EVALS", "All outstanding func-evals have not completed, detaching is not allowed at this time."),
                7193 => new Code(code, "CORDBG_E_DETACH_FAILED_OUTSTANDING_STEPPERS", "All outstanding steppers have not been closed, detaching is not allowed at this time."),
                7200 => new Code(code, "CORDBG_E_CANT_INTEROP_STEP_OUT", "Can't have an ICorDebugStepper do a native step-out."),
                7201 => new Code(code, "CORDBG_E_DETACH_FAILED_OUTSTANDING_BREAKPOINTS", "All outstanding breakpoints have not been closed, detaching is not allowed at this time."),
                7202 => new Code(code, "CORDBG_E_ILLEGAL_IN_STACK_OVERFLOW", "the operation is illegal because of a stackoverflow."),
                7203 => new Code(code, "CORDBG_E_ILLEGAL_AT_GC_UNSAFE_POINT", "The operation failed because it's a GC unsafe point."),
                7204 => new Code(code, "CORDBG_E_ILLEGAL_IN_PROLOG", "The operation failed because the thread is in the prolog"),
                7205 => new Code(code, "CORDBG_E_ILLEGAL_IN_NATIVE_CODE", "The operation failed because the thread is in native code"),
                7206 => new Code(code, "CORDBG_E_ILLEGAL_IN_OPTIMIZED_CODE", "The operation failed because the thread is in optimized code."),
                7207 => new Code(code, "CORDBG_E_MINIDUMP_UNSUPPORTED"),
                7208 => new Code(code, "CORDBG_E_APPDOMAIN_MISMATCH", "A supplied object or type belongs to the wrong AppDomain"),
                7209 => new Code(code, "CORDBG_E_CONTEXT_UNVAILABLE", "The thread's context is not available."),
                7216 => new Code(code, "CORDBG_E_UNCOMPATIBLE_PLATFORMS", "The operation failed because debuggee and debugger are on incompatible platform"),
                7217 => new Code(code, "CORDBG_E_DEBUGGING_DISABLED", "The operation failed because the debugging has been disabled"),
                7218 => new Code(code, "CORDBG_E_DETACH_FAILED_ON_ENC", "Detach is illegal after a module has been EnCed."),
                7219 => new Code(code, "CORDBG_E_CURRENT_EXCEPTION_IS_OUTSIDE_CURRENT_EXECUTION_SCOPE", "Interception of the current exception is not legal"),
                7220 => new Code(code, "CORDBG_E_HELPER_MAY_DEADLOCK", "Helper thread can not safely run code. The opereration may work at a later time."),
                7424 => new Code(code, "PEFMT_E_NO_CONTENTS", "File is empty"),
                7425 => new Code(code, "PEFMT_E_NO_NTHEADERS", "File has no NT headers"),
                7426 => new Code(code, "PEFMT_E_64BIT", "File is PE32+"),
                7427 => new Code(code, "PEFMT_E_NO_CORHEADER", "File has no COR header"),
                7428 => new Code(code, "PEFMT_E_NOT_ILONLY", "Flag IL_ONLY not set"),
                7429 => new Code(code, "PEFMT_E_IMPORT_DLLS", "Bad import DLLs"),
                7430 => new Code(code, "PEFMT_E_EXE_NOENTRYPOINT", "EXE file has no mgd entry point"),
                7431 => new Code(code, "PEFMT_E_BASE_RELOCS", "Bad base relocations"),
                7432 => new Code(code, "PEFMT_E_ENTRYPOINT", "Bad managed entry point"),
                7433 => new Code(code, "PEFMT_E_ZERO_SIZEOFCODE", "OptHeader.SizeOfCode==0"),
                7434 => new Code(code, "PEFMT_E_BAD_CORHEADER", "File has invalid COR header"),
                7680 => new Code(code, "CLR_OPTSVC_E_CONTROLLER_INTERRUPT", "Service controller interrupted work"),
                7936 => new Code(code, "NGEN_FAILED_GET_DEPENDENCIES", "Service manager failed to get ICorSvcDependencies interface"),
                7937 => new Code(code, "NGEN_FAILED_NATIVE_IMAGE_DELETE", "Failed to delete native image"),
                4120 => new Code(code, "COR_E_ASSEMBLYEXPECTED"),
                4115 => new Code(code, "COR_E_TYPEUNLOADED"),
                5376 => new Code(code, "COR_E_EXCEPTION"),
                4167 => new Code(code, "FUSION_E_INVALID_NAME", "The given assembly name or codebase was invalid."),
                4359 => new Code(code, "CLDB_E_FILE_OLDVER", "Old version error."),
                6402 => Unknown(code), // A configuration error but not documented anywhere
                6460 => Unknown(code), // This is a known code from Entity Framework but Microsoft won't document it: https://github.com/dotnet/ef6/issues/2259#issuecomment-2169658411
                _ => Unknown(code),
            };
        }
    }
}
