namespace Elmah.Io.HResults.Facilities
{
    internal class FacilitySecurityResolver : FacilityResolverBase
    {
        public FacilitySecurityResolver() : base(9, "FACILITY_SECURITY")
        {
        }

        internal override Code Resolve(bool failure, int code)
        {
            if (failure)
            {
                switch (code)
                {
                    case 1: return new Code(code, "NTE_BAD_UID", "Bad UID.");
                    case 2: return new Code(code, "NTE_BAD_HASH", "Bad hash.");
                    case 3: return new Code(code, "NTE_BAD_KEY", "Bad key.");
                    case 4: return new Code(code, "NTE_BAD_LEN", "Bad length.");
                    case 5: return new Code(code, "NTE_BAD_DATA", "Bad data.");
                    case 6: return new Code(code, "NTE_BAD_SIGNATURE", "Invalid signature.");
                    case 7: return new Code(code, "NTE_BAD_VER", "Bad version of provider.");
                    case 8: return new Code(code, "NTE_BAD_ALGID", "Invalid algorithm specified.");
                    case 9: return new Code(code, "NTE_BAD_FLAGS", "Invalid flags specified.");
                    case 10: return new Code(code, "NTE_BAD_TYPE", "Invalid type specified.");
                    case 11: return new Code(code, "NTE_BAD_KEY_STATE", "Key not valid for use in specified state.");
                    case 12: return new Code(code, "NTE_BAD_HASH_STATE", "Hash not valid for use in specified state.");
                    case 13: return new Code(code, "NTE_NO_KEY", "Key does not exist.");
                    case 14: return new Code(code, "NTE_NO_MEMORY", "Insufficient memory available for the operation.");
                    case 15: return new Code(code, "NTE_EXISTS", "Object already exists.");
                    case 16: return new Code(code, "NTE_PERM", "Access denied.");
                    case 17: return new Code(code, "NTE_NOT_FOUND", "Object was not found.");
                    case 18: return new Code(code, "NTE_DOUBLE_ENCRYPT", "Data already encrypted.");
                    case 19: return new Code(code, "NTE_BAD_PROVIDER", "Invalid provider specified.");
                    case 20: return new Code(code, "NTE_BAD_PROV_TYPE", "Invalid provider type specified.");
                    case 21: return new Code(code, "NTE_BAD_PUBLIC_KEY", "Provider's public key is invalid.");
                    case 22: return new Code(code, "NTE_BAD_KEYSET", "Key set does not exist.");
                    case 23: return new Code(code, "NTE_PROV_TYPE_NOT_DEF", "Provider type not defined.");
                    case 24: return new Code(code, "NTE_PROV_TYPE_ENTRY_BAD", "The provider type, as registered, is invalid.");
                    case 25: return new Code(code, "NTE_KEYSET_NOT_DEF", "The key set is not defined.");
                    case 26: return new Code(code, "NTE_KEYSET_ENTRY_BAD", "The key set, as registered, is invalid.");
                    case 27: return new Code(code, "NTE_PROV_TYPE_NO_MATCH", "Provider type does not match registered value.");
                    case 28: return new Code(code, "NTE_SIGNATURE_FILE_BAD", "The digital signature file is corrupt.");
                    case 29: return new Code(code, "NTE_PROVIDER_DLL_FAIL", "Provider DLL failed to initialize correctly.");
                    case 30: return new Code(code, "NTE_PROV_DLL_NOT_FOUND", "Provider DLL could not be found.");
                    case 31: return new Code(code, "NTE_BAD_KEYSET_PARAM", "The keyset parameter is invalid.");
                    case 32: return new Code(code, "NTE_FAIL", "An internal error occurred.");
                    case 33: return new Code(code, "NTE_SYS_ERR", "A base error occurred.");
                    case 34: return new Code(code, "NTE_SILENT_CONTEXT", "Provider could not perform the action because the context was acquired as silent.");
                    case 35: return new Code(code, "NTE_TOKEN_KEYSET_STORAGE_FULL", "The security token does not have storage space available for an additional container.");
                    case 36: return new Code(code, "NTE_TEMPORARY_PROFILE", "The profile for the user is a temporary profile.");
                    case 37: return new Code(code, "NTE_FIXEDPARAMETER", "The key parameters could not be set because the configuration service provider (CSP) uses fixed parameters.");
                    case 38: return new Code(code, "NTE_INVALID_HANDLE", "The supplied handle is invalid.");
                    case 39: return new Code(code, "NTE_INVALID_PARAMETER", "The parameter is incorrect.");
                    case 40: return new Code(code, "NTE_BUFFER_TOO_SMALL", "The buffer supplied to a function was too small.");
                    case 41: return new Code(code, "NTE_NOT_SUPPORTED", "The requested operation is not supported.");
                    case 42: return new Code(code, "NTE_NO_MORE_ITEMS", "No more data is available.");
                    case 43: return new Code(code, "NTE_BUFFERS_OVERLAP", "The supplied buffers overlap incorrectly.");
                    case 44: return new Code(code, "NTE_DECRYPTION_FAILURE", "The specified data could not be decrypted.");
                    case 45: return new Code(code, "NTE_INTERNAL_ERROR", "An internal consistency check failed.");
                    case 46: return new Code(code, "NTE_UI_REQUIRED", "This operation requires input from the user.");
                    case 47: return new Code(code, "NTE_HMAC_NOT_SUPPORTED", "The cryptographic provider does not support Hash Message Authentication Code (HMAC).");
                    case 768: return new Code(code, "SEC_E_INSUFFICIENT_MEMORY", "Not enough memory is available to complete this request.");
                    case 769: return new Code(code, "SEC_E_INVALID_HANDLE", "The handle specified is invalid.");
                    case 770: return new Code(code, "SEC_E_UNSUPPORTED_FUNCTION", "The function requested is not supported.");
                    case 771: return new Code(code, "SEC_E_TARGET_UNKNOWN", "The specified target is unknown or unreachable.");
                    case 772: return new Code(code, "SEC_E_INTERNAL_ERROR", "The Local Security Authority (LSA) cannot be contacted.");
                    case 773: return new Code(code, "SEC_E_SECPKG_NOT_FOUND", "The requested security package does not exist.");
                    case 774: return new Code(code, "SEC_E_NOT_OWNER", "The caller is not the owner of the desired credentials.");
                    case 775: return new Code(code, "SEC_E_CANNOT_INSTALL", "The security package failed to initialize and cannot be installed.");
                    case 776: return new Code(code, "SEC_E_INVALID_TOKEN", "The token supplied to the function is invalid.");
                    case 777: return new Code(code, "SEC_E_CANNOT_PACK", "The security package is not able to marshal the logon buffer, so the logon attempt has failed.");
                    case 778: return new Code(code, "SEC_E_QOP_NOT_SUPPORTED", "The per-message quality of protection is not supported by the security package.");
                    case 779: return new Code(code, "SEC_E_NO_IMPERSONATION", "The security context does not allow impersonation of the client.");
                    case 780: return new Code(code, "SEC_E_LOGON_DENIED", "The logon attempt failed.");
                    case 781: return new Code(code, "SEC_E_UNKNOWN_CREDENTIALS", "The credentials supplied to the package were not recognized.");
                    case 782: return new Code(code, "SEC_E_NO_CREDENTIALS", "No credentials are available in the security package.");
                    case 783: return new Code(code, "SEC_E_MESSAGE_ALTERED", "The message or signature supplied for verification has been altered.");
                    case 784: return new Code(code, "SEC_E_OUT_OF_SEQUENCE", "The message supplied for verification is out of sequence.");
                    case 785: return new Code(code, "SEC_E_NO_AUTHENTICATING_AUTHORITY", "No authority could be contacted for authentication.");
                    case 790: return new Code(code, "SEC_E_BAD_PKGID", "The requested security package does not exist.");
                    case 791: return new Code(code, "SEC_E_CONTEXT_EXPIRED", "The context has expired and can no longer be used.");
                    case 792: return new Code(code, "SEC_E_INCOMPLETE_MESSAGE", "The supplied message is incomplete. The signature was not verified.");
                    case 800: return new Code(code, "SEC_E_INCOMPLETE_CREDENTIALS", "The credentials supplied were not complete and could not be verified. The context could not be initialized.");
                    case 801: return new Code(code, "SEC_E_BUFFER_TOO_SMALL", "The buffers supplied to a function was too small.");
                    case 802: return new Code(code, "SEC_E_WRONG_PRINCIPAL", "The target principal name is incorrect.");
                    case 804: return new Code(code, "SEC_E_TIME_SKEW", "The clocks on the client and server machines are skewed.");
                    case 805: return new Code(code, "SEC_E_UNTRUSTED_ROOT", "The certificate chain was issued by an authority that is not trusted.");
                    case 806: return new Code(code, "SEC_E_ILLEGAL_MESSAGE", "The message received was unexpected or badly formatted.");
                    case 807: return new Code(code, "SEC_E_CERT_UNKNOWN", "An unknown error occurred while processing the certificate.");
                    case 808: return new Code(code, "SEC_E_CERT_EXPIRED", "The received certificate has expired.");
                    case 809: return new Code(code, "SEC_E_ENCRYPT_FAILURE", "The specified data could not be encrypted.");
                    case 816: return new Code(code, "SEC_E_DECRYPT_FAILURE", "The specified data could not be decrypted.");
                    case 817: return new Code(code, "SEC_E_ALGORITHM_MISMATCH", "The client and server cannot communicate because they do not possess a common algorithm.");
                    case 818: return new Code(code, "SEC_E_SECURITY_QOS_FAILED", "The security context could not be established due to a failure in the requested quality of service (for example, mutual authentication or delegation).");
                    case 819: return new Code(code, "SEC_E_UNFINISHED_CONTEXT_DELETED", "A security context was deleted before the context was completed. This is considered a logon failure.");
                    case 820: return new Code(code, "SEC_E_NO_TGT_REPLY", "The client is trying to negotiate a context and the server requires user-to-user but did not send a ticket granting ticket (TGT) reply.");
                    case 821: return new Code(code, "SEC_E_NO_IP_ADDRESSES", "Unable to accomplish the requested task because the local machine does not have an IP addresses.");
                    case 822: return new Code(code, "SEC_E_WRONG_CREDENTIAL_HANDLE", "The supplied credential handle does not match the credential associated with the security context.");
                    case 823: return new Code(code, "SEC_E_CRYPTO_SYSTEM_INVALID", "The cryptographic system or checksum function is invalid because a required function is unavailable.");
                    case 824: return new Code(code, "SEC_E_MAX_REFERRALS_EXCEEDED", "The number of maximum ticket referrals has been exceeded.");
                    case 825: return new Code(code, "SEC_E_MUST_BE_KDC", "The local machine must be a Kerberos domain controller (KDC), and it is not.");
                    case 826: return new Code(code, "SEC_E_STRONG_CRYPTO_NOT_SUPPORTED", "The other end of the security negotiation requires strong cryptographics, but it is not supported on the local machine.");
                    case 827: return new Code(code, "SEC_E_TOO_MANY_PRINCIPALS", "The KDC reply contained more than one principal name.");
                    case 828: return new Code(code, "SEC_E_NO_PA_DATA", "Expected to find PA data for a hint of what etype to use, but it was not found.");
                    case 829: return new Code(code, "SEC_E_PKINIT_NAME_MISMATCH", "The client certificate does not contain a valid user principal name (UPN), or does not match the client name in the logon request. Contact your administrator.");
                    case 830: return new Code(code, "SEC_E_SMARTCARD_LOGON_REQUIRED", "Smart card logon is required and was not used.");
                    case 831: return new Code(code, "SEC_E_SHUTDOWN_IN_PROGRESS", "A system shutdown is in progress.");
                    case 832: return new Code(code, "SEC_E_KDC_INVALID_REQUEST", "An invalid request was sent to the KDC.");
                    case 833: return new Code(code, "SEC_E_KDC_UNABLE_TO_REFER", "The KDC was unable to generate a referral for the service requested.");
                    case 834: return new Code(code, "SEC_E_KDC_UNKNOWN_ETYPE", "The encryption type requested is not supported by the KDC.");
                    case 835: return new Code(code, "SEC_E_UNSUPPORTED_PREAUTH", "An unsupported pre-authentication mechanism was presented to the Kerberos package.");
                    case 837: return new Code(code, "SEC_E_DELEGATION_REQUIRED", "The requested operation cannot be completed. The computer must be trusted for delegation, and the current user account must be configured to allow delegation.");
                    case 838: return new Code(code, "SEC_E_BAD_BINDINGS", "Client's supplied Security Support Provider Interface (SSPI) channel bindings were incorrect.");
                    case 839: return new Code(code, "SEC_E_MULTIPLE_ACCOUNTS", "The received certificate was mapped to multiple accounts.");
                    case 840: return new Code(code, "SEC_E_NO_KERB_KEY", "No Kerberos key was found.");
                    case 841: return new Code(code, "SEC_E_CERT_WRONG_USAGE", "The certificate is not valid for the requested usage.");
                    case 848: return new Code(code, "SEC_E_DOWNGRADE_DETECTED", "The system detected a possible attempt to compromise security. Ensure that you can contact the server that authenticated you.");
                    case 849: return new Code(code, "SEC_E_SMARTCARD_CERT_REVOKED", "The smart card certificate used for authentication has been revoked. Contact your system administrator. The event log might contain additional information.");
                    case 850: return new Code(code, "SEC_E_ISSUING_CA_UNTRUSTED", "An untrusted certification authority (CA) was detected while processing the smart card certificate used for authentication. Contact your system administrator.");
                    case 851: return new Code(code, "SEC_E_REVOCATION_OFFLINE_C", "The revocation status of the smart card certificate used for authentication could not be determined. Contact your system administrator.");
                    case 852: return new Code(code, "SEC_E_PKINIT_CLIENT_FAILURE", "The smart card certificate used for authentication was not trusted. Contact your system administrator.");
                    case 853: return new Code(code, "SEC_E_SMARTCARD_CERT_EXPIRED", "The smart card certificate used for authentication has expired. Contact your system administrator.");
                    case 854: return new Code(code, "SEC_E_NO_S4U_PROT_SUPPORT", "The Kerberos subsystem encountered an error. A service for user protocol requests was made against a domain controller that does not support services for users.");
                    case 855: return new Code(code, "SEC_E_CROSSREALM_DELEGATION_FAILURE", "An attempt was made by this server to make a Kerberos-constrained delegation request for a target outside the server's realm. This is not supported and indicates a misconfiguration on this server's allowed-to-delegate-to list. Contact your administrator.");
                    case 856: return new Code(code, "SEC_E_REVOCATION_OFFLINE_KDC", "The revocation status of the domain controller certificate used for smart card authentication could not be determined. The system event log contains additional information. Contact your system administrator.");
                    case 857: return new Code(code, "SEC_E_ISSUING_CA_UNTRUSTED_KDC", "An untrusted CA was detected while processing the domain controller certificate used for authentication. The system event log contains additional information. Contact your system administrator.");
                    case 858: return new Code(code, "SEC_E_KDC_CERT_EXPIRED", "The domain controller certificate used for smart card logon has expired. Contact your system administrator with the contents of your system event log.");
                    case 859: return new Code(code, "SEC_E_KDC_CERT_REVOKED", "The domain controller certificate used for smart card logon has been revoked. Contact your system administrator with the contents of your system event log.");
                    case 861: return new Code(code, "SEC_E_INVALID_PARAMETER", "One or more of the parameters passed to the function were invalid.");
                    case 862: return new Code(code, "SEC_E_DELEGATION_POLICY", "The client policy does not allow credential delegation to the target server.");
                    case 863: return new Code(code, "SEC_E_POLICY_NLTM_ONLY", "The client policy does not allow credential delegation to the target server with NLTM only authentication.");
                    case 4097: return new Code(code, "CRYPT_E_MSG_ERROR", "An error occurred while performing an operation on a cryptographic message.");
                    case 4098: return new Code(code, "CRYPT_E_UNKNOWN_ALGO", "Unknown cryptographic algorithm.");
                    case 4099: return new Code(code, "CRYPT_E_OID_FORMAT", "The object identifier is poorly formatted.");
                    case 4100: return new Code(code, "CRYPT_E_INVALID_MSG_TYPE", "Invalid cryptographic message type.");
                    case 4101: return new Code(code, "CRYPT_E_UNEXPECTED_ENCODING", "Unexpected cryptographic message encoding.");
                    case 4102: return new Code(code, "CRYPT_E_AUTH_ATTR_MISSING", "The cryptographic message does not contain an expected authenticated attribute.");
                    case 4103: return new Code(code, "CRYPT_E_HASH_VALUE", "The hash value is not correct.");
                    case 4104: return new Code(code, "CRYPT_E_INVALID_INDEX", "The index value is not valid.");
                    case 4105: return new Code(code, "CRYPT_E_ALREADY_DECRYPTED", "The content of the cryptographic message has already been decrypted.");
                    case 4106: return new Code(code, "CRYPT_E_NOT_DECRYPTED", "The content of the cryptographic message has not been decrypted yet.");
                    case 4107: return new Code(code, "CRYPT_E_RECIPIENT_NOT_FOUND", "The enveloped-data message does not contain the specified recipient.");
                    case 4108: return new Code(code, "CRYPT_E_CONTROL_TYPE", "Invalid control type.");
                    case 4109: return new Code(code, "CRYPT_E_ISSUER_SERIALNUMBER", "Invalid issuer or serial number.");
                    case 4110: return new Code(code, "CRYPT_E_SIGNER_NOT_FOUND", "Cannot find the original signer.");
                    case 4111: return new Code(code, "CRYPT_E_ATTRIBUTES_MISSING", "The cryptographic message does not contain all of the requested attributes.");
                    case 4112: return new Code(code, "CRYPT_E_STREAM_MSG_NOT_READY", "The streamed cryptographic message is not ready to return data.");
                    case 4113: return new Code(code, "CRYPT_E_STREAM_INSUFFICIENT_DATA", "The streamed cryptographic message requires more data to complete the decode operation.");
                    case 8193: return new Code(code, "CRYPT_E_BAD_LEN", "The length specified for the output data was insufficient.");
                    case 8194: return new Code(code, "CRYPT_E_BAD_ENCODE", "An error occurred during the encode or decode operation.");
                    case 8195: return new Code(code, "CRYPT_E_FILE_ERROR", "An error occurred while reading or writing to a file.");
                    case 8196: return new Code(code, "CRYPT_E_NOT_FOUND", "Cannot find object or property.");
                    case 8197: return new Code(code, "CRYPT_E_EXISTS", "The object or property already exists.");
                    case 8198: return new Code(code, "CRYPT_E_NO_PROVIDER", "No provider was specified for the store or object.");
                    case 8199: return new Code(code, "CRYPT_E_SELF_SIGNED", "The specified certificate is self-signed.");
                    case 8200: return new Code(code, "CRYPT_E_DELETED_PREV", "The previous certificate or certificate revocation list (CRL) context was deleted.");
                    case 8201: return new Code(code, "CRYPT_E_NO_MATCH", "Cannot find the requested object.");
                    case 8202: return new Code(code, "CRYPT_E_UNEXPECTED_MSG_TYPE", "The certificate does not have a property that references a private key.");
                    case 8203: return new Code(code, "CRYPT_E_NO_KEY_PROPERTY", "Cannot find the certificate and private key for decryption.");
                    case 8204: return new Code(code, "CRYPT_E_NO_DECRYPT_CERT", "Cannot find the certificate and private key to use for decryption.");
                    case 8205: return new Code(code, "CRYPT_E_BAD_MSG", "Not a cryptographic message or the cryptographic message is not formatted correctly.");
                    case 8206: return new Code(code, "CRYPT_E_NO_SIGNER", "The signed cryptographic message does not have a signer for the specified signer index.");
                    case 8207: return new Code(code, "CRYPT_E_PENDING_CLOSE", "Final closure is pending until additional frees or closes.");
                    case 8208: return new Code(code, "CRYPT_E_REVOKED", "The certificate is revoked.");
                    case 8209: return new Code(code, "CRYPT_E_NO_REVOCATION_DLL", "No DLL or exported function was found to verify revocation.");
                    case 8210: return new Code(code, "CRYPT_E_NO_REVOCATION_CHECK", "The revocation function was unable to check revocation for the certificate.");
                    case 8211: return new Code(code, "CRYPT_E_REVOCATION_OFFLINE", "The revocation function was unable to check revocation because the revocation server was offline.");
                    case 8212: return new Code(code, "CRYPT_E_NOT_IN_REVOCATION_DATABASE", "The certificate is not in the revocation server's database.");
                    case 8224: return new Code(code, "CRYPT_E_INVALID_NUMERIC_STRING", "The string contains a non-numeric character.");
                    case 8225: return new Code(code, "CRYPT_E_INVALID_PRINTABLE_STRING", "The string contains a nonprintable character.");
                    case 8226: return new Code(code, "CRYPT_E_INVALID_IA5_STRING", "The string contains a character not in the 7-bit ASCII character set.");
                    case 8227: return new Code(code, "CRYPT_E_INVALID_X500_STRING", "The string contains an invalid X500 name attribute key, object identifier (OID), value, or delimiter.");
                    case 8228: return new Code(code, "CRYPT_E_NOT_CHAR_STRING", "The dwValueType for the CERT_NAME_VALUE is not one of the character strings. Most likely it is either a CERT_RDN_ENCODED_BLOB or CERT_TDN_OCTED_STRING.");
                    case 8229: return new Code(code, "CRYPT_E_FILERESIZED", "The Put operation cannot continue. The file needs to be resized. However, there is already a signature present. A complete signing operation must be done.");
                    case 8230: return new Code(code, "CRYPT_E_SECURITY_SETTINGS", "The cryptographic operation failed due to a local security option setting.");
                    case 8231: return new Code(code, "CRYPT_E_NO_VERIFY_USAGE_DLL", "No DLL or exported function was found to verify subject usage.");
                    case 8232: return new Code(code, "CRYPT_E_NO_VERIFY_USAGE_CHECK", "The called function was unable to perform a usage check on the subject.");
                    case 8233: return new Code(code, "CRYPT_E_VERIFY_USAGE_OFFLINE", "The called function was unable to complete the usage check because the server was offline.");
                    case 8234: return new Code(code, "CRYPT_E_NOT_IN_CTL", "The subject was not found in a certificate trust list (CTL).");
                    case 8235: return new Code(code, "CRYPT_E_NO_TRUSTED_SIGNER", "None of the signers of the cryptographic message or certificate trust list is trusted.");
                    case 8236: return new Code(code, "CRYPT_E_MISSING_PUBKEY_PARA", "The public key's algorithm parameters are missing.");
                    case 12288: return new Code(code, "CRYPT_E_OSS_ERROR", "OSS Certificate encode/decode error code base.");
                    case 12289: return new Code(code, "OSS_MORE_BUF", "OSS ASN.1 Error: Output Buffer is too small.");
                    case 12290: return new Code(code, "OSS_NEGATIVE_UINTEGER", "OSS ASN.1 Error: Signed integer is encoded as a unsigned integer.");
                    case 12291: return new Code(code, "OSS_PDU_RANGE", "OSS ASN.1 Error: Unknown ASN.1 data type.");
                    case 12292: return new Code(code, "OSS_MORE_INPUT", "OSS ASN.1 Error: Output buffer is too small; the decoded data has been truncated.");
                    case 12293: return new Code(code, "OSS_DATA_ERROR", "OSS ASN.1 Error: Invalid data.");
                    case 12294: return new Code(code, "OSS_BAD_ARG", "OSS ASN.1 Error: Invalid argument.");
                    case 12295: return new Code(code, "OSS_BAD_VERSION", "OSS ASN.1 Error: Encode/Decode version mismatch.");
                    case 12296: return new Code(code, "OSS_OUT_MEMORY", "OSS ASN.1 Error: Out of memory.");
                    case 12297: return new Code(code, "OSS_PDU_MISMATCH", "OSS ASN.1 Error: Encode/Decode error.");
                    case 12298: return new Code(code, "OSS_LIMITED", "OSS ASN.1 Error: Internal error.");
                    case 12299: return new Code(code, "OSS_BAD_PTR", "OSS ASN.1 Error: Invalid data.");
                    case 12300: return new Code(code, "OSS_BAD_TIME", "OSS ASN.1 Error: Invalid data.");
                    case 12301: return new Code(code, "OSS_INDEFINITE_NOT_SUPPORTED", "OSS ASN.1 Error: Unsupported BER indefinite-length encoding.");
                    case 12302: return new Code(code, "OSS_MEM_ERROR", "OSS ASN.1 Error: Access violation.");
                    case 12303: return new Code(code, "OSS_BAD_TABLE", "OSS ASN.1 Error: Invalid data.");
                    case 12304: return new Code(code, "OSS_TOO_LONG", "OSS ASN.1 Error: Invalid data.");
                    case 12305: return new Code(code, "OSS_CONSTRAINT_VIOLATED", "OSS ASN.1 Error: Invalid data.");
                    case 12306: return new Code(code, "OSS_FATAL_ERROR", "OSS ASN.1 Error: Internal error.");
                    case 12307: return new Code(code, "OSS_ACCESS_SERIALIZATION_ERROR", "OSS ASN.1 Error: Multithreading conflict.");
                    case 12308: return new Code(code, "OSS_NULL_TBL", "OSS ASN.1 Error: Invalid data.");
                    case 12309: return new Code(code, "OSS_NULL_FCN", "OSS ASN.1 Error: Invalid data.");
                    case 12310: return new Code(code, "OSS_BAD_ENCRULES", "OSS ASN.1 Error: Invalid data.");
                    case 12311: return new Code(code, "OSS_UNAVAIL_ENCRULES", "OSS ASN.1 Error: Encode/Decode function not implemented.");
                    case 12312: return new Code(code, "OSS_CANT_OPEN_TRACE_WINDOW", "OSS ASN.1 Error: Trace file error.");
                    case 12313: return new Code(code, "OSS_UNIMPLEMENTED", "OSS ASN.1 Error: Function not implemented.");
                    case 12314: return new Code(code, "OSS_OID_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12315: return new Code(code, "OSS_CANT_OPEN_TRACE_FILE", "OSS ASN.1 Error: Trace file error.");
                    case 12316: return new Code(code, "OSS_TRACE_FILE_ALREADY_OPEN", "OSS ASN.1 Error: Trace file error.");
                    case 12317: return new Code(code, "OSS_TABLE_MISMATCH", "OSS ASN.1 Error: Invalid data.");
                    case 12318: return new Code(code, "OSS_TYPE_NOT_SUPPORTED", "OSS ASN.1 Error: Invalid data.");
                    case 12319: return new Code(code, "OSS_REAL_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12320: return new Code(code, "OSS_REAL_CODE_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12321: return new Code(code, "OSS_OUT_OF_RANGE", "OSS ASN.1 Error: Program link error.");
                    case 12322: return new Code(code, "OSS_COPIER_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12323: return new Code(code, "OSS_CONSTRAINT_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12324: return new Code(code, "OSS_COMPARATOR_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12325: return new Code(code, "OSS_COMPARATOR_CODE_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12326: return new Code(code, "OSS_MEM_MGR_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12327: return new Code(code, "OSS_PDV_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12328: return new Code(code, "OSS_PDV_CODE_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12329: return new Code(code, "OSS_API_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12330: return new Code(code, "OSS_BERDER_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12331: return new Code(code, "OSS_PER_DLL_NOT_LINKED", "OSS ASN.1 Error: Program link error.");
                    case 12332: return new Code(code, "OSS_OPEN_TYPE_ERROR", "OSS ASN.1 Error: Program link error.");
                    case 12333: return new Code(code, "OSS_MUTEX_NOT_CREATED", "OSS ASN.1 Error: System resource error.");
                    case 12334: return new Code(code, "OSS_CANT_CLOSE_TRACE_FILE", "OSS ASN.1 Error: Trace file error.");
                    case 12544: return new Code(code, "CRYPT_E_ASN1_ERROR", "ASN1 Certificate encode/decode error code base.");
                    case 12545: return new Code(code, "CRYPT_E_ASN1_INTERNAL", "ASN1 internal encode or decode error.");
                    case 12546: return new Code(code, "CRYPT_E_ASN1_EOD", "ASN1 unexpected end of data.");
                    case 12547: return new Code(code, "CRYPT_E_ASN1_CORRUPT", "ASN1 corrupted data.");
                    case 12548: return new Code(code, "CRYPT_E_ASN1_LARGE", "ASN1 value too large.");
                    case 12549: return new Code(code, "CRYPT_E_ASN1_CONSTRAINT", "ASN1 constraint violated.");
                    case 12550: return new Code(code, "CRYPT_E_ASN1_MEMORY", "ASN1 out of memory.");
                    case 12551: return new Code(code, "CRYPT_E_ASN1_OVERFLOW", "ASN1 buffer overflow.");
                    case 12552: return new Code(code, "CRYPT_E_ASN1_BADPDU", "ASN1 function not supported for this protocol data unit (PDU).");
                    case 12553: return new Code(code, "CRYPT_E_ASN1_BADARGS", "ASN1 bad arguments to function call.");
                    case 12554: return new Code(code, "CRYPT_E_ASN1_BADREAL", "ASN1 bad real value.");
                    case 12555: return new Code(code, "CRYPT_E_ASN1_BADTAG", "ASN1 bad tag value met.");
                    case 12556: return new Code(code, "CRYPT_E_ASN1_CHOICE", "ASN1 bad choice value.");
                    case 12557: return new Code(code, "CRYPT_E_ASN1_RULE", "ASN1 bad encoding rule.");
                    case 12558: return new Code(code, "CRYPT_E_ASN1_UTF8", "ASN1 bad Unicode (UTF8).");
                    case 12595: return new Code(code, "CRYPT_E_ASN1_PDU_TYPE", "ASN1 bad PDU type.");
                    case 12596: return new Code(code, "CRYPT_E_ASN1_NYI", "ASN1 not yet implemented.");
                    case 12801: return new Code(code, "CRYPT_E_ASN1_EXTENDED", "ASN1 skipped unknown extensions.");
                    case 12802: return new Code(code, "CRYPT_E_ASN1_NOEOD", "ASN1 end of data expected.");
                    case 16385: return new Code(code, "CERTSRV_E_BAD_REQUESTSUBJECT", "The request subject name is invalid or too long.");
                    case 16386: return new Code(code, "CERTSRV_E_NO_REQUEST", "The request does not exist.");
                    case 16387: return new Code(code, "CERTSRV_E_BAD_REQUESTSTATUS", "The request's current status does not allow this operation.");
                    case 16388: return new Code(code, "CERTSRV_E_PROPERTY_EMPTY", "The requested property value is empty.");
                    case 16389: return new Code(code, "CERTSRV_E_INVALID_CA_CERTIFICATE", "The CA's certificate contains invalid data.");
                    case 16390: return new Code(code, "CERTSRV_E_SERVER_SUSPENDED", "Certificate service has been suspended for a database restore operation.");
                    case 16391: return new Code(code, "CERTSRV_E_ENCODING_LENGTH", "The certificate contains an encoded length that is potentially incompatible with older enrollment software.");
                    case 16392: return new Code(code, "CERTSRV_E_ROLECONFLICT", "The operation is denied. The user has multiple roles assigned, and the CA is configured to enforce role separation.");
                    case 16393: return new Code(code, "CERTSRV_E_RESTRICTEDOFFICER", "The operation is denied. It can only be performed by a certificate manager that is allowed to manage certificates for the current requester.");
                    case 16394: return new Code(code, "CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED", "Cannot archive private key. The CA is not configured for key archival.");
                    case 16395: return new Code(code, "CERTSRV_E_NO_VALID_KRA", "Cannot archive private key. The CA could not verify one or more key recovery certificates.");
                    case 16396: return new Code(code, "CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL", "The request is incorrectly formatted. The encrypted private key must be in an unauthenticated attribute in an outermost signature.");
                    case 16397: return new Code(code, "CERTSRV_E_NO_CAADMIN_DEFINED", "At least one security principal must have the permission to manage this CA.");
                    case 16398: return new Code(code, "CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE", "The request contains an invalid renewal certificate attribute.");
                    case 16399: return new Code(code, "CERTSRV_E_NO_DB_SESSIONS", "An attempt was made to open a CA database session, but there are already too many active sessions. The server needs to be configured to allow additional sessions.");
                    case 16400: return new Code(code, "CERTSRV_E_ALIGNMENT_FAULT", "A memory reference caused a data alignment fault.");
                    case 16401: return new Code(code, "CERTSRV_E_ENROLL_DENIED", "The permissions on this CA do not allow the current user to enroll for certificates.");
                    case 16402: return new Code(code, "CERTSRV_E_TEMPLATE_DENIED", "The permissions on the certificate template do not allow the current user to enroll for this type of certificate.");
                    case 16403: return new Code(code, "CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE", "The contacted domain controller cannot support signed Lightweight Directory Access Protocol (LDAP) traffic. Update the domain controller or configure Certificate Services to use SSL for Active Directory access.");
                    case 18432: return new Code(code, "CERTSRV_E_UNSUPPORTED_CERT_TYPE", "The requested certificate template is not supported by this CA.");
                    case 18433: return new Code(code, "CERTSRV_E_NO_CERT_TYPE", "The request contains no certificate template information.");
                    case 18434: return new Code(code, "CERTSRV_E_TEMPLATE_CONFLICT", "The request contains conflicting template information.");
                    case 18435: return new Code(code, "CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED", "The request is missing a required Subject Alternate name extension.");
                    case 18436: return new Code(code, "CERTSRV_E_ARCHIVED_KEY_REQUIRED", "The request is missing a required private key for archival by the server.");
                    case 18437: return new Code(code, "CERTSRV_E_SMIME_REQUIRED", "The request is missing a required SMIME capabilities extension.");
                    case 18438: return new Code(code, "CERTSRV_E_BAD_RENEWAL_SUBJECT", "The request was made on behalf of a subject other than the caller. The certificate template must be configured to require at least one signature to authorize the request.");
                    case 18439: return new Code(code, "CERTSRV_E_BAD_TEMPLATE_VERSION", "The request template version is newer than the supported template version.");
                    case 18440: return new Code(code, "CERTSRV_E_TEMPLATE_POLICY_REQUIRED", "The template is missing a required signature policy attribute.");
                    case 18441: return new Code(code, "CERTSRV_E_SIGNATURE_POLICY_REQUIRED", "The request is missing required signature policy information.");
                    case 18442: return new Code(code, "CERTSRV_E_SIGNATURE_COUNT", "The request is missing one or more required signatures.");
                    case 18443: return new Code(code, "CERTSRV_E_SIGNATURE_REJECTED", "One or more signatures did not include the required application or issuance policies. The request is missing one or more required valid signatures.");
                    case 18444: return new Code(code, "CERTSRV_E_ISSUANCE_POLICY_REQUIRED", "The request is missing one or more required signature issuance policies.");
                    case 18445: return new Code(code, "CERTSRV_E_SUBJECT_UPN_REQUIRED", "The UPN is unavailable and cannot be added to the Subject Alternate name.");
                    case 18446: return new Code(code, "CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED", "The Active Directory GUID is unavailable and cannot be added to the Subject Alternate name.");
                    case 18447: return new Code(code, "CERTSRV_E_SUBJECT_DNS_REQUIRED", "The Domain Name System (DNS) name is unavailable and cannot be added to the Subject Alternate name.");
                    case 18448: return new Code(code, "CERTSRV_E_ARCHIVED_KEY_UNEXPECTED", "The request includes a private key for archival by the server, but key archival is not enabled for the specified certificate template.");
                    case 18449: return new Code(code, "CERTSRV_E_KEY_LENGTH", "The public key does not meet the minimum size required by the specified certificate template.");
                    case 18450: return new Code(code, "CERTSRV_E_SUBJECT_EMAIL_REQUIRED", "The email name is unavailable and cannot be added to the Subject or Subject Alternate name.");
                    case 18451: return new Code(code, "CERTSRV_E_UNKNOWN_CERT_TYPE", "One or more certificate templates to be enabled on this CA could not be found.");
                    case 18452: return new Code(code, "CERTSRV_E_CERT_TYPE_OVERLAP", "The certificate template renewal period is longer than the certificate validity period. The template should be reconfigured or the CA certificate renewed.");
                    case 18453: return new Code(code, "CERTSRV_E_TOO_MANY_SIGNATURES", "The certificate template requires too many return authorization (RA) signatures. Only one RA signature is allowed.");
                    case 18454: return new Code(code, "CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY", "The key used in a renewal request does not match one of the certificates being renewed.");
                    case 18455: return new Code(code, "CERTSRV_E_INVALID_EK", "The endorsement key certificate is not valid.");
                    case 18458: return new Code(code, "CERTSRV_E_KEY_ATTESTATION", "Key attestation did not succeed.");
                    case 20480: return new Code(code, "XENROLL_E_KEY_NOT_EXPORTABLE", "The key is not exportable.");
                    case 20481: return new Code(code, "XENROLL_E_CANNOT_ADD_ROOT_CERT", "You cannot add the root CA certificate into your local store.");
                    case 20482: return new Code(code, "XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND", "The key archival hash attribute was not found in the response.");
                    case 20483: return new Code(code, "XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH", "An unexpected key archival hash attribute was found in the response.");
                    case 20484: return new Code(code, "XENROLL_E_RESPONSE_KA_HASH_MISMATCH", "There is a key archival hash mismatch between the request and the response.");
                    case 20485: return new Code(code, "XENROLL_E_KEYSPEC_SMIME_MISMATCH", "Signing certificate cannot include SMIME extension.");
                    case 24577: return new Code(code, "TRUST_E_SYSTEM_ERROR", "A system-level error occurred while verifying trust.");
                    case 24578: return new Code(code, "TRUST_E_NO_SIGNER_CERT", "The certificate for the signer of the message is invalid or not found.");
                    case 24579: return new Code(code, "TRUST_E_COUNTER_SIGNER", "One of the counter signatures was invalid.");
                    case 24580: return new Code(code, "TRUST_E_CERT_SIGNATURE", "The signature of the certificate cannot be verified.");
                    case 24581: return new Code(code, "TRUST_E_TIME_STAMP", "The time-stamp signature or certificate could not be verified or is malformed.");
                    case 24592: return new Code(code, "TRUST_E_BAD_DIGEST", "The digital signature of the object did not verify.");
                    case 24601: return new Code(code, "TRUST_E_BASIC_CONSTRAINTS", "A certificate's basic constraint extension has not been observed.");
                    case 24606: return new Code(code, "TRUST_E_FINANCIAL_CRITERIA", "The certificate does not meet or contain the Authenticode financial extensions.");
                    case 28673: return new Code(code, "MSSIPOTF_E_OUTOFMEMRANGE", "Tried to reference a part of the file outside the proper range.");
                    case 28674: return new Code(code, "MSSIPOTF_E_CANTGETOBJECT", "Could not retrieve an object from the file.");
                    case 28675: return new Code(code, "MSSIPOTF_E_NOHEADTABLE", "Could not find the head table in the file.");
                    case 28676: return new Code(code, "MSSIPOTF_E_BAD_MAGICNUMBER", "The magic number in the head table is incorrect.");
                    case 28677: return new Code(code, "MSSIPOTF_E_BAD_OFFSET_TABLE", "The offset table has incorrect values.");
                    case 28678: return new Code(code, "MSSIPOTF_E_TABLE_TAGORDER", "Duplicate table tags or the tags are out of alphabetical order.");
                    case 28679: return new Code(code, "MSSIPOTF_E_TABLE_LONGWORD", "A table does not start on a long word boundary.");
                    case 28680: return new Code(code, "MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT", "First table does not appear after header information.");
                    case 28681: return new Code(code, "MSSIPOTF_E_TABLES_OVERLAP", "Two or more tables overlap.");
                    case 28682: return new Code(code, "MSSIPOTF_E_TABLE_PADBYTES", "Too many pad bytes between tables, or pad bytes are not 0.");
                    case 28683: return new Code(code, "MSSIPOTF_E_FILETOOSMALL", "File is too small to contain the last table.");
                    case 28684: return new Code(code, "MSSIPOTF_E_TABLE_CHECKSUM", "A table checksum is incorrect.");
                    case 28685: return new Code(code, "MSSIPOTF_E_FILE_CHECKSUM", "The file checksum is incorrect.");
                    case 28688: return new Code(code, "MSSIPOTF_E_FAILED_POLICY", "The signature does not have the correct attributes for the policy.");
                    case 28689: return new Code(code, "MSSIPOTF_E_FAILED_HINTS_CHECK", "The file did not pass the hints check.");
                    case 28690: return new Code(code, "MSSIPOTF_E_NOT_OPENTYPE", "The file is not an OpenType file.");
                    case 28691: return new Code(code, "MSSIPOTF_E_FILE", "Failed on a file operation (such as open, map, read, or write).");
                    case 28692: return new Code(code, "MSSIPOTF_E_CRYPT", "A call to a CryptoAPI function failed.");
                    case 28693: return new Code(code, "MSSIPOTF_E_BADVERSION", "There is a bad version number in the file.");
                    case 28694: return new Code(code, "MSSIPOTF_E_DSIG_STRUCTURE", "The structure of the DSIG table is incorrect.");
                    case 28695: return new Code(code, "MSSIPOTF_E_PCONST_CHECK", "A check failed in a partially constant table.");
                    case 28696: return new Code(code, "MSSIPOTF_E_STRUCTURE", "Some kind of structural error.");
                    case 28697: return new Code(code, "ERROR_CRED_REQUIRES_CONFIRMATION", "The requested credential requires confirmation.");
                }
            }
            else
            {
                switch (code)
                {
                    case 786: return new Code(code, "SEC_I_CONTINUE_NEEDED", "The function completed successfully, but it must be called again to complete the context.");
                    case 787: return new Code(code, "SEC_I_COMPLETE_NEEDED", "The function completed successfully, but CompleteToken must be called.");
                    case 788: return new Code(code, "SEC_I_COMPLETE_AND_CONTINUE", "The function completed successfully, but both CompleteToken and this function must be called to complete the context.");
                    case 789: return new Code(code, "SEC_I_LOCAL_LOGON", "The logon was completed, but no network authority was available. The logon was made using locally known information.");
                    case 791: return new Code(code, "SEC_I_CONTEXT_EXPIRED", "The context has expired and can no longer be used.");
                    case 800: return new Code(code, "SEC_I_INCOMPLETE_CREDENTIALS", "The credentials supplied were not complete and could not be verified. Additional information can be returned from the context.");
                    case 801: return new Code(code, "SEC_I_RENEGOTIATE", "The context data must be renegotiated with the peer.");
                    case 803: return new Code(code, "SEC_I_NO_LSA_CONTEXT", "There is no LSA mode context associated with this context.");
                    case 860: return new Code(code, "SEC_I_SIGNATURE_NEEDED", "A signature operation must be performed before the user can authenticate.");
                    case 4114: return new Code(code, "CRYPT_I_NEW_PROTECTION_REQUIRED", "The protected data needs to be reprotected.");
                }
            }

            return Unknown(code);
        }
    }
}
