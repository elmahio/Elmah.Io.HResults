namespace Elmah.Io.HResults.Facilities
{
    internal class FacilityItfResolver : FacilityResolverBase
    {
        public FacilityItfResolver() : base(4, "FACILITY_ITF")
        {
        }

        internal override Code Resolve(bool failure, int code)
        {
            if (failure)
            {
                switch (code)
                {
                    case 0: return new Code(code, "OLE_E_OLEVERB", "Invalid OLEVERB structure.");
                    case 1: return new Code(code, "OLE_E_ADVF", "Invalid advise flags.");
                    case 2: return new Code(code, "OLE_E_ENUM_NOMORE", "Cannot enumerate any more because the associated data is missing.");
                    case 3: return new Code(code, "OLE_E_ADVISENOTSUPPORTED", "This implementation does not take advises.");
                    case 4: return new Code(code, "OLE_E_NOCONNECTION", "There is no connection for this connection ID.");
                    case 5: return new Code(code, "OLE_E_NOTRUNNING", "Need to run the object to perform this operation.");
                    case 6: return new Code(code, "OLE_E_NOCACHE", "There is no cache to operate on.");
                    case 7: return new Code(code, "OLE_E_BLANK", "Uninitialized object.");
                    case 8: return new Code(code, "OLE_E_CLASSDIFF", "Linked object's source class has changed.");
                    case 9: return new Code(code, "OLE_E_CANT_GETMONIKER", "Not able to get the moniker of the object.");
                    case 10: return new Code(code, "OLE_E_CANT_BINDTOSOURCE", "Not able to bind to the source.");
                    case 11: return new Code(code, "OLE_E_STATIC", "Object is static; operation not allowed.");
                    case 12: return new Code(code, "OLE_E_PROMPTSAVECANCELLED", "User canceled out of the Save dialog box.");
                    case 13: return new Code(code, "OLE_E_INVALIDRECT", "Invalid rectangle.");
                    case 14: return new Code(code, "OLE_E_WRONGCOMPOBJ", "compobj.dll is too old for the ole2.dll initialized.");
                    case 15: return new Code(code, "OLE_E_INVALIDHWND", "Invalid window handle.");
                    case 16: return new Code(code, "OLE_E_NOT_INPLACEACTIVE", "Object is not in any of the inplace active states.");
                    case 17: return new Code(code, "OLE_E_CANTCONVERT", "Not able to convert object.");
                    case 18: return new Code(code, "OLE_E_NOSTORAGE", "Not able to perform the operation because object is not given storage yet.");
                    case 100: return new Code(code, "DV_E_FORMATETC", "Invalid FORMATETC structure.");
                    case 101: return new Code(code, "DV_E_DVTARGETDEVICE", "Invalid DVTARGETDEVICE structure.");
                    case 102: return new Code(code, "DV_E_STGMEDIUM", "Invalid STDGMEDIUM structure.");
                    case 103: return new Code(code, "DV_E_STATDATA", "Invalid STATDATA structure.");
                    case 104: return new Code(code, "DV_E_LINDEX", "Invalid lindex.");
                    case 105: return new Code(code, "DV_E_TYMED", "Invalid TYMED structure.");
                    case 106: return new Code(code, "DV_E_CLIPFORMAT", "Invalid clipboard format.");
                    case 107: return new Code(code, "DV_E_DVASPECT", "Invalid aspects.");
                    case 108: return new Code(code, "DV_E_DVTARGETDEVICE_SIZE", "The tdSize parameter of the DVTARGETDEVICE structure is invalid.");
                    case 109: return new Code(code, "DV_E_NOIVIEWOBJECT", "Object does not support IViewObject interface.");
                    case 256: return new Code(code, "DRAGDROP_E_NOTREGISTERED", "Trying to revoke a drop target that has not been registered.");
                    case 257: return new Code(code, "DRAGDROP_E_ALREADYREGISTERED", "This window has already been registered as a drop target.");
                    case 258: return new Code(code, "DRAGDROP_E_INVALIDHWND", "Invalid window handle.");
                    case 272: return new Code(code, "CLASS_E_NOAGGREGATION", "Class does not support aggregation (or class object is remote).");
                    case 273: return new Code(code, "CLASS_E_CLASSNOTAVAILABLE", "ClassFactory cannot supply requested class.");
                    case 274: return new Code(code, "CLASS_E_NOTLICENSED", "Class is not licensed for use.");
                    case 320: return new Code(code, "VIEW_E_DRAW", "Error drawing view.");
                    case 336: return new Code(code, "REGDB_E_READREGDB", "Could not read key from registry.");
                    case 337: return new Code(code, "REGDB_E_WRITEREGDB", "Could not write key to registry.");
                    case 338: return new Code(code, "REGDB_E_KEYMISSING", "Could not find the key in the registry.");
                    case 339: return new Code(code, "REGDB_E_INVALIDVALUE", "Invalid value for registry.");
                    case 340: return new Code(code, "REGDB_E_CLASSNOTREG", "Class not registered.");
                    case 341: return new Code(code, "REGDB_E_IIDNOTREG", "Interface not registered.");
                    case 342: return new Code(code, "REGDB_E_BADTHREADINGMODEL", "Threading model entry is not valid.");
                    case 352: return new Code(code, "CAT_E_CATIDNOEXIST", "CATID does not exist.");
                    case 353: return new Code(code, "CAT_E_NODESCRIPTION", "Description not found.");
                    case 356: return new Code(code, "CS_E_PACKAGE_NOTFOUND", "No package in the software installation data in Active Directory meets this criteria.");
                    case 357: return new Code(code, "CS_E_NOT_DELETABLE", "Deleting this will break the referential integrity of the software installation data in Active Directory.");
                    case 358: return new Code(code, "CS_E_CLASS_NOTFOUND", "The CLSID was not found in the software installation data in Active Directory.");
                    case 359: return new Code(code, "CS_E_INVALID_VERSION", "The software installation data in Active Directory is corrupt.");
                    case 360: return new Code(code, "CS_E_NO_CLASSSTORE", "There is no software installation data in Active Directory.");
                    case 361: return new Code(code, "CS_E_OBJECT_NOTFOUND", "There is no software installation data object in Active Directory.");
                    case 362: return new Code(code, "CS_E_OBJECT_ALREADY_EXISTS", "The software installation data object in Active Directory already exists.");
                    case 363: return new Code(code, "CS_E_INVALID_PATH", "The path to the software installation data in Active Directory is not correct.");
                    case 364: return new Code(code, "CS_E_NETWORK_ERROR", "A network error interrupted the operation.");
                    case 365: return new Code(code, "CS_E_ADMIN_LIMIT_EXCEEDED", "The size of this object exceeds the maximum size set by the administrator.");
                    case 366: return new Code(code, "CS_E_SCHEMA_MISMATCH", "The schema for the software installation data in Active Directory does not match the required schema.");
                    case 367: return new Code(code, "CS_E_INTERNAL_ERROR", "An error occurred in the software installation data in Active Directory.");
                    case 368: return new Code(code, "CACHE_E_NOCACHE_UPDATED", "Cache not updated.");
                    case 384: return new Code(code, "OLEOBJ_E_NOVERBS", "No verbs for OLE object.");
                    case 385: return new Code(code, "OLEOBJ_E_INVALIDVERB", "Invalid verb for OLE object.");
                    case 416: return new Code(code, "INPLACE_E_NOTUNDOABLE", "Undo is not available.");
                    case 417: return new Code(code, "INPLACE_E_NOTOOLSPACE", "Space for tools is not available.");
                    case 448: return new Code(code, "CONVERT10_E_OLESTREAM_GET", "OLESTREAM Get method failed.");
                    case 449: return new Code(code, "CONVERT10_E_OLESTREAM_PUT", "OLESTREAM Put method failed.");
                    case 450: return new Code(code, "CONVERT10_E_OLESTREAM_FMT", "Contents of the OLESTREAM not in correct format.");
                    case 451: return new Code(code, "CONVERT10_E_OLESTREAM_BITMAP_TO_DIB", "There was an error in a Windows GDI call while converting the bitmap to a device-independent bitmap (DIB).");
                    case 452: return new Code(code, "CONVERT10_E_STG_FMT", "Contents of the IStorage not in correct format.");
                    case 453: return new Code(code, "CONVERT10_E_STG_NO_STD_STREAM", "Contents of IStorage is missing one of the standard streams.");
                    case 454: return new Code(code, "CONVERT10_E_STG_DIB_TO_BITMAP", "There was an error in a Windows Graphics Device Interface (GDI) call while converting the DIB to a bitmap.");
                    case 464: return new Code(code, "CLIPBRD_E_CANT_OPEN", "OpenClipboard failed.");
                    case 465: return new Code(code, "CLIPBRD_E_CANT_EMPTY", "EmptyClipboard failed.");
                    case 466: return new Code(code, "CLIPBRD_E_CANT_SET", "SetClipboard failed.");
                    case 467: return new Code(code, "CLIPBRD_E_BAD_DATA", "Data on clipboard is invalid.");
                    case 468: return new Code(code, "CLIPBRD_E_CANT_CLOSE", "CloseClipboard failed.");
                    case 480: return new Code(code, "MK_E_CONNECTMANUALLY", "Moniker needs to be connected manually.");
                    case 481: return new Code(code, "MK_E_EXCEEDEDDEADLINE", "Operation exceeded deadline.");
                    case 482: return new Code(code, "MK_E_NEEDGENERIC", "Moniker needs to be generic.");
                    case 483: return new Code(code, "MK_E_UNAVAILABLE", "Operation unavailable.");
                    case 484: return new Code(code, "MK_E_SYNTAX", "Invalid syntax.");
                    case 485: return new Code(code, "MK_E_NOOBJECT", "No object for moniker.");
                    case 486: return new Code(code, "MK_E_INVALIDEXTENSION", "Bad extension for file.");
                    case 487: return new Code(code, "MK_E_INTERMEDIATEINTERFACENOTSUPPORTED", "Intermediate operation failed.");
                    case 488: return new Code(code, "MK_E_NOTBINDABLE", "Moniker is not bindable.");
                    case 489: return new Code(code, "MK_E_NOTBOUND", "Moniker is not bound.");
                    case 490: return new Code(code, "MK_E_CANTOPENFILE", "Moniker cannot open file.");
                    case 491: return new Code(code, "MK_E_MUSTBOTHERUSER", "User input required for operation to succeed.");
                    case 492: return new Code(code, "MK_E_NOINVERSE", "Moniker class has no inverse.");
                    case 493: return new Code(code, "MK_E_NOSTORAGE", "Moniker does not refer to storage.");
                    case 494: return new Code(code, "MK_E_NOPREFIX", "No common prefix.");
                    case 495: return new Code(code, "MK_E_ENUMERATION_FAILED", "Moniker could not be enumerated.");
                    case 496: return new Code(code, "CO_E_NOTINITIALIZED", "CoInitialize has not been called.");
                    case 497: return new Code(code, "CO_E_ALREADYINITIALIZED", "CoInitialize has already been called.");
                    case 498: return new Code(code, "CO_E_CANTDETERMINECLASS", "Class of object cannot be determined.");
                    case 499: return new Code(code, "CO_E_CLASSSTRING", "Invalid class string.");
                    case 500: return new Code(code, "CO_E_IIDSTRING", "Invalid interface string.");
                    case 501: return new Code(code, "CO_E_APPNOTFOUND", "Application not found.");
                    case 502: return new Code(code, "CO_E_APPSINGLEUSE", "Application cannot be run more than once.");
                    case 503: return new Code(code, "CO_E_ERRORINAPP", "Some error in application.");
                    case 504: return new Code(code, "CO_E_DLLNOTFOUND", "DLL for class not found.");
                    case 505: return new Code(code, "CO_E_ERRORINDLL", "Error in the DLL.");
                    case 506: return new Code(code, "CO_E_WRONGOSFORAPP", "Wrong operating system or operating system version for application.");
                    case 507: return new Code(code, "CO_E_OBJNOTREG", "Object is not registered.");
                    case 508: return new Code(code, "CO_E_OBJISREG", "Object is already registered.");
                    case 509: return new Code(code, "CO_E_OBJNOTCONNECTED", "Object is not connected to server.");
                    case 510: return new Code(code, "CO_E_APPDIDNTREG", "Application was launched, but it did not register a class factory.");
                    case 511: return new Code(code, "CO_E_RELEASED", "Object has been released.");
                    case 513: return new Code(code, "EVENT_E_ALL_SUBSCRIBERS_FAILED", "An event was unable to invoke any of the subscribers.");
                    case 515: return new Code(code, "EVENT_E_QUERYSYNTAX", "A syntax error occurred trying to evaluate a query string.");
                    case 516: return new Code(code, "EVENT_E_QUERYFIELD", "An invalid field name was used in a query string.");
                    case 517: return new Code(code, "EVENT_E_INTERNALEXCEPTION", "An unexpected exception was raised.");
                    case 518: return new Code(code, "EVENT_E_INTERNALERROR", "An unexpected internal error was detected.");
                    case 519: return new Code(code, "EVENT_E_INVALID_PER_USER_SID", "The owner security identifier (SID) on a per-user subscription does not exist.");
                    case 520: return new Code(code, "EVENT_E_USER_EXCEPTION", "A user-supplied component or subscriber raised an exception.");
                    case 521: return new Code(code, "EVENT_E_TOO_MANY_METHODS", "An interface has too many methods to fire events from.");
                    case 522: return new Code(code, "EVENT_E_MISSING_EVENTCLASS", "A subscription cannot be stored unless its event class already exists.");
                    case 523: return new Code(code, "EVENT_E_NOT_ALL_REMOVED", "Not all the objects requested could be removed.");
                    case 524: return new Code(code, "EVENT_E_COMPLUS_NOT_INSTALLED", "COM+ is required for this operation, but it is not installed.");
                    case 525: return new Code(code, "EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT", "Cannot modify or delete an object that was not added using the COM+ Administrative SDK.");
                    case 526: return new Code(code, "EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT", "Cannot modify or delete an object that was added using the COM+ Administrative SDK.");
                    case 527: return new Code(code, "EVENT_E_INVALID_EVENT_CLASS_PARTITION", "The event class for this subscription is in an invalid partition.");
                    case 528: return new Code(code, "EVENT_E_PER_USER_SID_NOT_LOGGED_ON", "The owner of the PerUser subscription is not logged on to the system specified.");
                    case 4873: return new Code(code, "SCHED_E_TRIGGER_NOT_FOUND", "Trigger not found.");
                    case 4874: return new Code(code, "SCHED_E_TASK_NOT_READY", "One or more of the properties that are needed to run this task have not been set.");
                    case 4875: return new Code(code, "SCHED_E_TASK_NOT_RUNNING", "There is no running instance of the task.");
                    case 4876: return new Code(code, "SCHED_E_SERVICE_NOT_INSTALLED", "The Task Scheduler service is not installed on this computer.");
                    case 4877: return new Code(code, "SCHED_E_CANNOT_OPEN_TASK", "The task object could not be opened.");
                    case 4878: return new Code(code, "SCHED_E_INVALID_TASK", "The object is either an invalid task object or is not a task object.");
                    case 4879: return new Code(code, "SCHED_E_ACCOUNT_INFORMATION_NOT_SET", "No account information could be found in the Task Scheduler security database for the task indicated.");
                    case 4880: return new Code(code, "SCHED_E_ACCOUNT_NAME_NOT_FOUND", "Unable to establish existence of the account specified.");
                    case 4881: return new Code(code, "SCHED_E_ACCOUNT_DBASE_CORRUPT", "Corruption was detected in the Task Scheduler security database; the database has been reset.");
                    case 4882: return new Code(code, "SCHED_E_NO_SECURITY_SERVICES", "Task Scheduler security services are available only on Windows NT operating system.");
                    case 4883: return new Code(code, "SCHED_E_UNKNOWN_OBJECT_VERSION", "The task object version is either unsupported or invalid.");
                    case 4884: return new Code(code, "SCHED_E_UNSUPPORTED_ACCOUNT_OPTION", "The task has been configured with an unsupported combination of account settings and run-time options.");
                    case 4885: return new Code(code, "SCHED_E_SERVICE_NOT_RUNNING", "The Task Scheduler service is not running.");
                    case 4886: return new Code(code, "SCHED_E_UNEXPECTEDNODE", "The task XML contains an unexpected node.");
                    case 4887: return new Code(code, "SCHED_E_NAMESPACE", "The task XML contains an element or attribute from an unexpected namespace.");
                    case 4888: return new Code(code, "SCHED_E_INVALIDVALUE", "The task XML contains a value that is incorrectly formatted or out of range.");
                    case 4889: return new Code(code, "SCHED_E_MISSINGNODE", "The task XML is missing a required element or attribute.");
                    case 4890: return new Code(code, "SCHED_E_MALFORMEDXML", "The task XML is malformed.");
                    case 4893: return new Code(code, "SCHED_E_TOO_MANY_NODES", "The task XML contains too many nodes of the same type.");
                    case 4894: return new Code(code, "SCHED_E_PAST_END_BOUNDARY", "The task cannot be started after the trigger's end boundary.");
                    case 4895: return new Code(code, "SCHED_E_ALREADY_RUNNING", "An instance of this task is already running.");
                    case 4896: return new Code(code, "SCHED_E_USER_NOT_LOGGED_ON", "The task will not run because the user is not logged on.");
                    case 4897: return new Code(code, "SCHED_E_INVALID_TASK_HASH", "The task image is corrupt or has been tampered with.");
                    case 4898: return new Code(code, "SCHED_E_SERVICE_NOT_AVAILABLE", "The Task Scheduler service is not available.");
                    case 4899: return new Code(code, "SCHED_E_SERVICE_TOO_BUSY", "The Task Scheduler service is too busy to handle your request. Try again later.");
                    case 4900: return new Code(code, "SCHED_E_TASK_ATTEMPTED", "The Task Scheduler service attempted to run the task, but the task did not run due to one of the constraints in the task definition.");
                    case 53248: return new Code(code, "XACT_E_ALREADYOTHERSINGLEPHASE", "Another single phase resource manager has already been enlisted in this transaction.");
                    case 53249: return new Code(code, "XACT_E_CANTRETAIN", "A retaining commit or abort is not supported.");
                    case 53250: return new Code(code, "XACT_E_COMMITFAILED", "The transaction failed to commit for an unknown reason. The transaction was aborted.");
                    case 53251: return new Code(code, "XACT_E_COMMITPREVENTED", "Cannot call commit on this transaction object because the calling application did not initiate the transaction.");
                    case 53252: return new Code(code, "XACT_E_HEURISTICABORT", "Instead of committing, the resource heuristically aborted.");
                    case 53253: return new Code(code, "XACT_E_HEURISTICCOMMIT", "Instead of aborting, the resource heuristically committed.");
                    case 53254: return new Code(code, "XACT_E_HEURISTICDAMAGE", "Some of the states of the resource were committed while others were aborted, likely because of heuristic decisions.");
                    case 53255: return new Code(code, "XACT_E_HEURISTICDANGER", "Some of the states of the resource might have been committed while others were aborted, likely because of heuristic decisions.");
                    case 53256: return new Code(code, "XACT_E_ISOLATIONLEVEL", "The requested isolation level is not valid or supported.");
                    case 53257: return new Code(code, "XACT_E_NOASYNC", "The transaction manager does not support an asynchronous operation for this method.");
                    case 53258: return new Code(code, "XACT_E_NOENLIST", "Unable to enlist in the transaction.");
                    case 53259: return new Code(code, "XACT_E_NOISORETAIN", "The requested semantics of retention of isolation across retaining commit and abort boundaries cannot be supported by this transaction implementation, or isoFlags was not equal to 0.");
                    case 53260: return new Code(code, "XACT_E_NORESOURCE", "There is no resource presently associated with this enlistment.");
                    case 53261: return new Code(code, "XACT_E_NOTCURRENT", "The transaction failed to commit due to the failure of optimistic concurrency control in at least one of the resource managers.");
                    case 53262: return new Code(code, "XACT_E_NOTRANSACTION", "The transaction has already been implicitly or explicitly committed or aborted.");
                    case 53263: return new Code(code, "XACT_E_NOTSUPPORTED", "An invalid combination of flags was specified.");
                    case 53264: return new Code(code, "XACT_E_UNKNOWNRMGRID", "The resource manager ID is not associated with this transaction or the transaction manager.");
                    case 53265: return new Code(code, "XACT_E_WRONGSTATE", "This method was called in the wrong state.");
                    case 53266: return new Code(code, "XACT_E_WRONGUOW", "The indicated unit of work does not match the unit of work expected by the resource manager.");
                    case 53267: return new Code(code, "XACT_E_XTIONEXISTS", "An enlistment in a transaction already exists.");
                    case 53268: return new Code(code, "XACT_E_NOIMPORTOBJECT", "An import object for the transaction could not be found.");
                    case 53269: return new Code(code, "XACT_E_INVALIDCOOKIE", "The transaction cookie is invalid.");
                    case 53270: return new Code(code, "XACT_E_INDOUBT", "The transaction status is in doubt. A communication failure occurred, or a transaction manager or resource manager has failed.");
                    case 53271: return new Code(code, "XACT_E_NOTIMEOUT", "A time-out was specified, but time-outs are not supported.");
                    case 53272: return new Code(code, "XACT_E_ALREADYINPROGRESS", "The requested operation is already in progress for the transaction.");
                    case 53273: return new Code(code, "XACT_E_ABORTED", "The transaction has already been aborted.");
                    case 53274: return new Code(code, "XACT_E_LOGFULL", "The Transaction Manager returned a log full error.");
                    case 53275: return new Code(code, "XACT_E_TMNOTAVAILABLE", "The transaction manager is not available.");
                    case 53276: return new Code(code, "XACT_E_CONNECTION_DOWN", "A connection with the transaction manager was lost.");
                    case 53277: return new Code(code, "XACT_E_CONNECTION_DENIED", "A request to establish a connection with the transaction manager was denied.");
                    case 53278: return new Code(code, "XACT_E_REENLISTTIMEOUT", "Resource manager reenlistment to determine transaction status timed out.");
                    case 53279: return new Code(code, "XACT_E_TIP_CONNECT_FAILED", "The transaction manager failed to establish a connection with another Transaction Internet Protocol (TIP) transaction manager.");
                    case 53280: return new Code(code, "XACT_E_TIP_PROTOCOL_ERROR", "The transaction manager encountered a protocol error with another TIP transaction manager.");
                    case 53281: return new Code(code, "XACT_E_TIP_PULL_FAILED", "The transaction manager could not propagate a transaction from another TIP transaction manager.");
                    case 53282: return new Code(code, "XACT_E_DEST_TMNOTAVAILABLE", "The transaction manager on the destination machine is not available.");
                    case 53283: return new Code(code, "XACT_E_TIP_DISABLED", "The transaction manager has disabled its support for TIP.");
                    case 53284: return new Code(code, "XACT_E_NETWORK_TX_DISABLED", "The transaction manager has disabled its support for remote or network transactions.");
                    case 53285: return new Code(code, "XACT_E_PARTNER_NETWORK_TX_DISABLED", "The partner transaction manager has disabled its support for remote or network transactions.");
                    case 53286: return new Code(code, "XACT_E_XA_TX_DISABLED", "The transaction manager has disabled its support for XA transactions.");
                    case 53287: return new Code(code, "XACT_E_UNABLE_TO_READ_DTC_CONFIG", "Microsoft Distributed Transaction Coordinator (MSDTC) was unable to read its configuration information.");
                    case 53288: return new Code(code, "XACT_E_UNABLE_TO_LOAD_DTC_PROXY", "MSDTC was unable to load the DTC proxy DLL.");
                    case 53289: return new Code(code, "XACT_E_ABORTING", "The local transaction has aborted.");
                    case 53376: return new Code(code, "XACT_E_CLERKNOTFOUND", "The specified CRM clerk was not found. It might have completed before it could be held.");
                    case 53377: return new Code(code, "XACT_E_CLERKEXISTS", "The specified CRM clerk does not exist.");
                    case 53378: return new Code(code, "XACT_E_RECOVERYINPROGRESS", "Recovery of the CRM log file is still in progress.");
                    case 53379: return new Code(code, "XACT_E_TRANSACTIONCLOSED", "The transaction has completed, and the log records have been discarded from the log file. They are no longer available.");
                    case 53380: return new Code(code, "XACT_E_INVALIDLSN", "lsnToRead is outside of the current limits of the log");
                    case 53381: return new Code(code, "XACT_E_REPLAYREQUEST", "The COM+ Compensating Resource Manager has records it wishes to replay.");
                    case 53504: return new Code(code, "XACT_E_CONNECTION_REQUEST_DENIED", "The request to connect to the specified transaction coordinator was denied.");
                    case 53505: return new Code(code, "XACT_E_TOOMANY_ENLISTMENTS", "The maximum number of enlistments for the specified transaction has been reached.");
                    case 53506: return new Code(code, "XACT_E_DUPLICATE_GUID", "A resource manager with the same identifier is already registered with the specified transaction coordinator.");
                    case 53507: return new Code(code, "XACT_E_NOTSINGLEPHASE", "The prepare request given was not eligible for single-phase optimizations.");
                    case 53508: return new Code(code, "XACT_E_RECOVERYALREADYDONE", "RecoveryComplete has already been called for the given resource manager.");
                    case 53509: return new Code(code, "XACT_E_PROTOCOL", "The interface call made was incorrect for the current state of the protocol.");
                    case 53510: return new Code(code, "XACT_E_RM_FAILURE", "The xa_open call failed for the XA resource.");
                    case 53511: return new Code(code, "XACT_E_RECOVERY_FAILED", "The xa_recover call failed for the XA resource.");
                    case 53512: return new Code(code, "XACT_E_LU_NOT_FOUND", "The logical unit of work specified cannot be found.");
                    case 53513: return new Code(code, "XACT_E_DUPLICATE_LU", "The specified logical unit of work already exists.");
                    case 53514: return new Code(code, "XACT_E_LU_NOT_CONNECTED", "Subordinate creation failed. The specified logical unit of work was not connected.");
                    case 53515: return new Code(code, "XACT_E_DUPLICATE_TRANSID", "A transaction with the given identifier already exists.");
                    case 53516: return new Code(code, "XACT_E_LU_BUSY", "The resource is in use.");
                    case 53517: return new Code(code, "XACT_E_LU_NO_RECOVERY_PROCESS", "The LU Recovery process is down.");
                    case 53518: return new Code(code, "XACT_E_LU_DOWN", "The remote session was lost.");
                    case 53519: return new Code(code, "XACT_E_LU_RECOVERING", "The resource is currently recovering.");
                    case 53520: return new Code(code, "XACT_E_LU_RECOVERY_MISMATCH", "There was a mismatch in driving recovery.");
                    case 53521: return new Code(code, "XACT_E_RM_UNAVAILABLE", "An error occurred with the XA resource.");
                    case 57346: return new Code(code, "CONTEXT_E_ABORTED", "The root transaction wanted to commit, but the transaction aborted.");
                    case 57347: return new Code(code, "CONTEXT_E_ABORTING", "The COM+ component on which the method call was made has a transaction that has already aborted or is in the process of aborting.");
                    case 57348: return new Code(code, "CONTEXT_E_NOCONTEXT", "There is no Microsoft Transaction Server (MTS) object context.");
                    case 57349: return new Code(code, "CONTEXT_E_WOULD_DEADLOCK", "The component is configured to use synchronization, and this method call would cause a deadlock to occur.");
                    case 57350: return new Code(code, "CONTEXT_E_SYNCH_TIMEOUT", "The component is configured to use synchronization, and a thread has timed out waiting to enter the context.");
                    case 57351: return new Code(code, "CONTEXT_E_OLDREF", "You made a method call on a COM+ component that has a transaction that has already committed or aborted.");
                    case 57356: return new Code(code, "CONTEXT_E_ROLENOTFOUND", "The specified role was not configured for the application.");
                    case 57359: return new Code(code, "CONTEXT_E_TMNOTAVAILABLE", "COM+ was unable to talk to the MSDTC.");
                    case 57377: return new Code(code, "CO_E_ACTIVATIONFAILED", "An unexpected error occurred during COM+ activation.");
                    case 57378: return new Code(code, "CO_E_ACTIVATIONFAILED_EVENTLOGGED", "COM+ activation failed. Check the event log for more information.");
                    case 57379: return new Code(code, "CO_E_ACTIVATIONFAILED_CATALOGERROR", "COM+ activation failed due to a catalog or configuration error.");
                    case 57380: return new Code(code, "CO_E_ACTIVATIONFAILED_TIMEOUT", "COM+ activation failed because the activation could not be completed in the specified amount of time.");
                    case 57381: return new Code(code, "CO_E_INITIALIZATIONFAILED", "COM+ activation failed because an initialization function failed. Check the event log for more information.");
                    case 57382: return new Code(code, "CONTEXT_E_NOJIT", "The requested operation requires that just-in-time (JIT) be in the current context, and it is not.");
                    case 57383: return new Code(code, "CONTEXT_E_NOTRANSACTION", "The requested operation requires that the current context have a transaction, and it does not.");
                    case 57384: return new Code(code, "CO_E_THREADINGMODEL_CHANGED", "The components threading model has changed after install into a COM+ application. Re-install component.");
                    case 57385: return new Code(code, "CO_E_NOIISINTRINSICS", "Internet Information Services (IIS) intrinsics not available. Start your work with IIS.");
                    case 57386: return new Code(code, "CO_E_NOCOOKIES", "An attempt to write a cookie failed.");
                    case 57387: return new Code(code, "CO_E_DBERROR", "An attempt to use a database generated a database-specific error.");
                    case 57388: return new Code(code, "CO_E_NOTPOOLED", "The COM+ component you created must use object pooling to work.");
                    case 57389: return new Code(code, "CO_E_NOTCONSTRUCTED", "The COM+ component you created must use object construction to work correctly.");
                    case 57390: return new Code(code, "CO_E_NOSYNCHRONIZATION", "The COM+ component requires synchronization, and it is not configured for it.");
                    case 57391: return new Code(code, "CO_E_ISOLEVELMISMATCH", "The TxIsolation Level property for the COM+ component being created is stronger than the TxIsolationLevel for the root.");
                    case 57392: return new Code(code, "CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED", "The component attempted to make a cross-context call between invocations of EnterTransactionScope and ExitTransactionScope. This is not allowed. Cross-context calls cannot be made while inside a transaction scope.");
                    case 57393: return new Code(code, "CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED", "The component made a call to EnterTransactionScope, but did not make a corresponding call to ExitTransactionScope before returning.");
                }
            }
            else
            {
                switch (code)
                {
                    case 0: return new Code(code, "OLE_S_USEREG", "Use the registry database to provide the requested information.");
                    case 1: return new Code(code, "OLE_S_STATIC", "Success, but static.");
                    case 2: return new Code(code, "OLE_S_MAC_CLIPFORMAT", "Macintosh clipboard format.");
                    case 256: return new Code(code, "DRAGDROP_S_DROP", "Successful drop took place.");
                    case 257: return new Code(code, "DRAGDROP_S_CANCEL", "Drag-drop operation canceled.");
                    case 258: return new Code(code, "DRAGDROP_S_USEDEFAULTCURSORS", "Use the default cursor.");
                    case 304: return new Code(code, "DATA_S_SAMEFORMATETC", "Data has same FORMATETC.");
                    case 320: return new Code(code, "VIEW_S_ALREADY_FROZEN", "View is already frozen.");
                    case 368: return new Code(code, "CACHE_S_FORMATETC_NOTSUPPORTED", "FORMATETC not supported.");
                    case 369: return new Code(code, "CACHE_S_SAMECACHE", "Same cache.");
                    case 370: return new Code(code, "CACHE_S_SOMECACHES_NOTUPDATED", "Some caches are not updated.");
                    case 384: return new Code(code, "OLEOBJ_S_INVALIDVERB", "Invalid verb for OLE object.");
                    case 385: return new Code(code, "OLEOBJ_S_CANNOT_DOVERB_NOW", "Verb number is valid but verb cannot be done now.");
                    case 386: return new Code(code, "OLEOBJ_S_INVALIDHWND", "Invalid window handle passed.");
                    case 416: return new Code(code, "INPLACE_S_TRUNCATED", "Message is too long; some of it had to be truncated before displaying.");
                    case 448: return new Code(code, "CONVERT10_S_NO_PRESENTATION", "Unable to convert OLESTREAM to IStorage.");
                    case 482: return new Code(code, "MK_S_REDUCED_TO_SELF", "Moniker reduced to itself.");
                    case 484: return new Code(code, "MK_S_ME", "Common prefix is this moniker.");
                    case 485: return new Code(code, "MK_S_HIM", "Common prefix is input moniker.");
                    case 486: return new Code(code, "MK_S_US", "Common prefix is both monikers.");
                    case 487: return new Code(code, "MK_S_MONIKERALREADYREGISTERED", "Moniker is already registered in running object table.");
                    case 512: return new Code(code, "EVENT_S_SOME_SUBSCRIBERS_FAILED", "An event was able to invoke some, but not all, of the subscribers.");
                    case 514: return new Code(code, "EVENT_S_NOSUBSCRIBERS", "An event was delivered, but there were no subscribers.");
                    case 4864: return new Code(code, "SCHED_S_TASK_READY", "The task is ready to run at its next scheduled time.");
                    case 4865: return new Code(code, "SCHED_S_TASK_RUNNING", "The task is currently running.");
                    case 4866: return new Code(code, "SCHED_S_TASK_DISABLED", "The task will not run at the scheduled times because it has been disabled.");
                    case 4867: return new Code(code, "SCHED_S_TASK_HAS_NOT_RUN", "The task has not yet run.");
                    case 4868: return new Code(code, "SCHED_S_TASK_NO_MORE_RUNS", "There are no more runs scheduled for this task.");
                    case 4869: return new Code(code, "SCHED_S_TASK_NOT_SCHEDULED", "One or more of the properties that are needed to run this task on a schedule have not been set.");
                    case 4870: return new Code(code, "SCHED_S_TASK_TERMINATED", "The last run of the task was terminated by the user.");
                    case 4871: return new Code(code, "SCHED_S_TASK_NO_VALID_TRIGGERS", "Either the task has no triggers, or the existing triggers are disabled or not set.");
                    case 4872: return new Code(code, "SCHED_S_EVENT_TRIGGER", "Event triggers do not have set run times.");
                    case 4891: return new Code(code, "SCHED_S_SOME_TRIGGERS_FAILED", "The task is registered, but not all specified triggers will start the task.");
                    case 4892: return new Code(code, "SCHED_S_BATCH_LOGON_PROBLEM", "The task is registered, but it might fail to start. Batch logon privilege needs to be enabled for the task principal.");
                    case 53248: return new Code(code, "XACT_S_ASYNC", "An asynchronous operation was specified. The operation has begun, but its outcome is not known yet.");
                    case 53250: return new Code(code, "XACT_S_READONLY", "The method call succeeded because the transaction was read-only.");
                    case 53251: return new Code(code, "XACT_S_SOMENORETAIN", "The transaction was successfully aborted. However, this is a coordinated transaction, and a number of enlisted resources were aborted outright because they could not support abort-retaining semantics.");
                    case 53252: return new Code(code, "XACT_S_OKINFORM", "No changes were made during this call, but the sink wants another chance to look if any other sinks make further changes.");
                    case 53253: return new Code(code, "XACT_S_MADECHANGESCONTENT", "The sink is content and wants the transaction to proceed. Changes were made to one or more resources during this call.");
                    case 53254: return new Code(code, "XACT_S_MADECHANGESINFORM", "The sink is for the moment and wants the transaction to proceed, but if other changes are made following this return by other event sinks, this sink wants another chance to look.");
                    case 53255: return new Code(code, "XACT_S_ALLNORETAIN", "The transaction was successfully aborted. However, the abort was nonretaining.");
                    case 53256: return new Code(code, "XACT_S_ABORTING", "An abort operation was already in progress.");
                    case 53257: return new Code(code, "XACT_S_SINGLEPHASE", "The resource manager has performed a single-phase commit of the transaction.");
                    case 53258: return new Code(code, "XACT_S_LOCALLY_OK", "The local transaction has not aborted.");
                    case 53264: return new Code(code, "XACT_S_LASTRESOURCEMANAGER", "The resource manager has requested to be the coordinator (last resource manager) for the transaction.");
                }
            }

            return Unknown(code);
        }
    }
}
